@page "/Account/confirmemailchange"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Options
@using ZauberCMS.Core.Membership
@using ZauberCMS.Core.Membership.Models
@using ZauberCMS.Components.Account.Shared
@using ZauberCMS.Core.Membership.Interfaces
@using ZauberCMS.Core.Plugins
@using ZauberCMS.Core.Settings

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject IdentityRedirectManager RedirectManager
<LayoutView Layout="LayoutType">
<PageTitle>Confirm email change</PageTitle>

<h1>Confirm email change</h1>

<StatusMessage Message="@message"/>
</LayoutView>
@code {
    private string? message;
    [Inject] public IOptions<ZauberSettings> Settings { get; set; } = default!;
    [Inject] public ExtensionManager ExtensionManager { get; set; } = default!;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery] private string? UserId { get; set; }

    [SupplyParameterFromQuery] private string? Email { get; set; }

    [SupplyParameterFromQuery] private string? Code { get; set; }

    private Type LayoutType { get; set; } = default!;

    protected override void OnParametersSet()
    {
        var allLayouts = ExtensionManager.GetInstances<IAccountLayout>();
        if (allLayouts.TryGetValue(Settings.Value.Identity.AccountLayout!, out var accountLayout))
        {
            LayoutType = accountLayout.GetType();
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Email is null || Code is null)
        {
            RedirectManager.RedirectToWithStatus(
                "Account/Login", "Error: Invalid email change confirmation link.", HttpContext);
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            message = "Unable to find user with Id '{userId}'";
            return;
        }

        var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
        var result = await UserManager.ChangeEmailAsync(user, Email, code);
        if (!result.Succeeded)
        {
            message = "Error changing email.";
            return;
        }

        // In our UI email and user name are one and the same, so when we update the email
        // we need to update the user name.
        var setUserNameResult = await UserManager.SetUserNameAsync(user, Email);
        if (!setUserNameResult.Succeeded)
        {
            message = "Error changing user name.";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        message = "Thank you for confirming your email change.";
    }

}