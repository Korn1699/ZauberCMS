@page "/Account/Register"
@using Microsoft.Extensions.Options
@using ZauberCMS.Core.Membership
@using ZauberCMS.Core.Membership.Commands
@using ZauberCMS.Core.Membership.Interfaces
@using ZauberCMS.Core.Plugins
@using ZauberCMS.Core.Settings
@using ZauberCMS.Core.Shared.Models
<LayoutView Layout="LayoutType">
<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessage ResultMessages="@ResultMessages"/>
        <EditForm Model="RegisterUserCommand" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator/>
            <h2>Create a new account.</h2>
            <hr/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <InputText @bind-Value="RegisterUserCommand.Username" class="form-control" aria-required="true" placeholder="Username"/>
                <label for="username">Username</label>
                <ValidationMessage For="() => RegisterUserCommand.Username" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="RegisterUserCommand.Email" class="form-control" aria-required="true" placeholder="name@example.com"/>
                <label for="email">Email</label>
                <ValidationMessage For="() => RegisterUserCommand.Email" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="RegisterUserCommand.Password" class="form-control" aria-required="true" placeholder="password"/>
                <label for="password">Password</label>
                <ValidationMessage For="() => RegisterUserCommand.Password" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr/>
            <ExternalLoginPicker/>
        </section>
    </div>
</div>
</LayoutView>
@code {
    [SupplyParameterFromForm] public RegisterUserCommand RegisterUserCommand { get; set; } = new();
    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }
    
    [Inject] public IdentityRedirectManager RedirectManager { get; set; } = default!;
    [Inject] public IOptions<ZauberSettings> Settings { get; set; } = default!;
    [Inject] public ExtensionManager ExtensionManager { get; set; } = default!;

    private List<ResultMessage> ResultMessages { get; set; } = [];
    private Type LayoutType { get; set; } = default!;

    protected override void OnParametersSet()
    {
        var allLayouts = ExtensionManager.GetInstances<IAccountLayout>();
        if (allLayouts.TryGetValue(Settings.Value.Identity.AccountLayout!, out var accountLayout))
        {
            LayoutType = accountLayout.GetType();
        }
    }
    
    public async Task RegisterUser(EditContext editContext)
    {
        if (editContext.Validate())
        {
            RegisterUserCommand.AutoLogin = true;
            var result = await Mediator.Send(RegisterUserCommand);

            if (result.Success)
            {
                if (!result.NavigateToUrl.IsNullOrWhiteSpace())
                {
                    RedirectManager.RedirectTo(result.NavigateToUrl);
                }

                ResultMessages = result.Messages.SuccessMessages().ToList();
            }
            else
            {
                ResultMessages = result.Messages.ErrorMessages().ToList();
            }
        }
    }

}