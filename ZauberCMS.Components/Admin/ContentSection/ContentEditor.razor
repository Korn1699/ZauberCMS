@using Microsoft.AspNetCore.Components.Authorization
@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Core.Content.Interfaces
@using ZauberCMS.Core.Shared
@using ZauberCMS.Core.Plugins
@using ZauberCMS.Components.Editors.Dialogs
@using ZauberCMS.Core.Shared.Services
@using ZauberCMS.Core.Shared.Validation.Interfaces

@if (ContentType != null)
{
    <EditForm Model="@Content" OnSubmit="Save">
        
        <RadzenRow class="rz-pb-2">
            <RadzenTextBox Style="width: 100%;" Name="Name" Placeholder="Name" Value="@Content.Name" ValueChanged="@((string name) => { Content.Name = name; })" aria-label="Name"/>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="0">
                <RadzenIcon Icon="schedule" Style="line-height: 20px; height: 20px; font-size: 20px;" IconStyle="IconStyle.Light"/> <RadzenText TextStyle="TextStyle.Caption" Style="margin: 0; padding: 0;">Last Updated: @Content.DateUpdated.Humanize()</RadzenText>
            </RadzenStack>
        </RadzenRow>

        <RadzenTabs @ref="Tabs" RenderMode="TabRenderMode.Client" Change="@(i => TabChange(i))">
            <Tabs>
                @foreach (var tab in ContentType.Tabs.Where(x => !x.IsSystemTab).OrderBy(x => x.SortOrder))
                {
                    <RadzenTabsItem>
                        <Template Context="tabContext">
                            @tab.Name
                        </Template>
                        <ChildContent>
                            <RadzenStack Gap="1rem">
                                @foreach (var property in ContentType.ContentProperties
                                              .Where(x => x.TabId == tab.Id)
                                              .OrderBy(x => x.SortOrder))
                                {
                                    if (property.Component != null)
                                    {
                                        AllContentTypeProperties.TryGetValue(property.Component, out var contentPropertyComponent);
                                        if (contentPropertyComponent != null)
                                        {
                                            AllContentValues.TryGetValue(property.Id, out var contentValue);
                                            if (contentValue != null)
                                            {
                                                <EditorRow FullWidth="@(property.FullWidth)">
                                                    <LeftColumn>
                                                        <PropertyInfo Name="@property.Name" Alias="@property.Alias" Description="@property.Description" />
                                                    </LeftColumn>
                                                    <CentreColumn>
                                                        <DynamicContentProperty ComponentType="@contentPropertyComponent.GetType()"
                                                                                Settings="@property.Settings"
                                                                                Content="@Content"
                                                                                Value="@contentValue.Value"
                                                                                ValueChanged="@(value => UpdateProperty(contentValue.ContentTypePropertyId, value))"/>
                                                    </CentreColumn>
                                                </EditorRow>
                                            }
                                        }
                                    }
                                }

                            </RadzenStack >
                        </ChildContent>
                    </RadzenTabsItem>
                }

                @if (IsBlockList != true)
                {
                    <RadzenTabsItem Text="System">
                        <EditorRow>
                            <LeftColumn>
                                <RadzenLabel Text="Id"/>
                            </LeftColumn>
                            <CentreColumn>
                                @Content.Id
                            </CentreColumn>
                        </EditorRow>

                        <EditorRow>
                            <LeftColumn>
                                <RadzenLabel Text="Url"/>
                            </LeftColumn>
                            <CentreColumn>
                                <RadzenTextBox Style="width: 100%;" Name="Url" @bind-Value="@Content.Url"/>
                            </CentreColumn>
                        </EditorRow>

                        <EditorRow>
                            <LeftColumn>
                                <RadzenLabel Text="Hide From Navigation"/>
                            </LeftColumn>
                            <CentreColumn>
                                <RadzenSwitch Name="HideFromNavigation" @bind-Value="@Content.HideFromNavigation"  />
                            </CentreColumn>
                        </EditorRow>
                        
                        <EditorRow>
                            <LeftColumn>
                                <RadzenLabel Text="Internal Redirect Id"/>
                            </LeftColumn>
                            <CentreColumn>
                                <RadzenTextBox Style="width: 100%;" Name="InternalRedirectId" @bind-Value="@Content.InternalRedirectIdAsString"/>
                            </CentreColumn>
                        </EditorRow>

                        <EditorRow>
                            <LeftColumn>
                                <RadzenLabel Text="Content View"/>
                            </LeftColumn>
                            <CentreColumn>
                                <RadzenDropDown @bind-Value="@Content.ViewComponent" Data="@AvailableContentViews" TextProperty="Key" ValueProperty="Value" Style="width: 100%; max-width: 400px;"/>
                            </CentreColumn>
                        </EditorRow>
                    </RadzenTabsItem>
                }
            </Tabs>
        </RadzenTabs>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center">
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Icon="save" Text="Save"/>
        </RadzenStack>

    </EditForm>
}
else
{
    <ListContentTypes OnContentTypeSelected="@UpdateContentTypeId"
                      RootOnly="@RootOnly"
                      ElementTypesOnly="@ElementTypesOnly"/>
}

@code {

    [CascadingParameter] BlazoredModalInstance ContentEditorModal { get; set; } = default!;
    [CascadingParameter] IModalService ModalService { get; set; } = default!;
    [Inject] public NotificationService NotificationService { get; set; } = default!;
    [Inject] public ExtensionManager ExtensionManager { get; set; } = default!;
    [Inject] public AppState AppState { get; set; } = default!;
    [Inject] public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
    [Inject] public ValidateService<Content> ValidateService { get; set; } = default!;
    
    [Parameter] public Guid? ContentId { get; set; }
    [Parameter] public Guid? ParentId { get; set; }
    [Parameter] public bool? IsBlockList { get; set; }
    [Parameter] public Content? Content { get; set; }

    private ContentType? ContentType { get; set; }
    private Dictionary<string, IContentProperty> AllContentTypeProperties { get; set; } = new();
    private Dictionary<Guid, ContentPropertyValue> AllContentValues { get; set; } = new();
    private Dictionary<string, string> AvailableContentViews { get; set; } = new();
    private int SelectedTabIndex { get; set; }
    private RadzenTabs Tabs { get; set; }
    private bool RootOnly => IsBlockList != true && ContentId == null && ParentId == null;
    private bool ElementTypesOnly => IsBlockList == true;
    private AuthenticationState AuthState { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        AllContentTypeProperties = ExtensionManager.GetInstances<IContentProperty>(true);
        AuthState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (Content == null)
        {
            // If no content is passed in
            if (ContentId != null)
            {
                Content = await Mediator.Send(new GetContentCommand { Id = ContentId.Value });
                ContentType = await Mediator.Send(new GetContentTypeCommand { Id = Content.ContentTypeId });
                SyncProperties(Content, ContentType);
            }
            else if (ParentId != null)
            {
                Content = new Content
                {
                    ParentId = ParentId,
                    IsRootContent = false
                };
            }
            else
            {
                Content = new Content
                {
                    IsRootContent = IsBlockList != true
                };
            }
        }
        else
        {
            // We have a content item passed in
            ContentType = await Mediator.Send(new GetContentTypeCommand { Id = Content.ContentTypeId });
            SyncProperties(Content, ContentType);
        }
    }

    private void TabChange(int i)
    {
        SelectedTabIndex = i;
    }

    private async Task UpdateProperty(Guid ctpId, string value)
    {
        var property = Content?.PropertyData.FirstOrDefault(p => p.ContentTypePropertyId == ctpId);
        if (property != null)
        {
            property.Value = value;
            property.DateUpdated = DateTime.UtcNow;
        }
    }

    private void SyncProperties(Content content, ContentType contentType)
    {
        var toRemove = new List<ContentPropertyValue>();
        // Check for properties that were removed
        foreach (var cpd in content.PropertyData)
        {
            var existsInContentType = contentType.ContentProperties.Any(x => x.Id == cpd.ContentTypePropertyId);
            if (!existsInContentType)
            {
                // Mark for removal
                toRemove.Add(cpd);
            }
        }

        // Remove the properties
        foreach (var tr in toRemove)
        {
            content.PropertyData.Remove(tr);
        }

        // Check for properties to add
        foreach (var ctp in contentType.ContentProperties)
        {
            var exists = content.PropertyData.FirstOrDefault(x => x.ContentTypePropertyId == ctp.Id);
            if (exists == null)
            {
                // Add it
                content.PropertyData.Add(new ContentPropertyValue
                {
                    ContentTypePropertyId = ctp.Id,
                    Alias = ctp.Alias,
                    ContentId = Content.Id
                });
            }
        }

        AllContentValues = Content.PropertyData.ToDictionary(x => x.ContentTypePropertyId, x => x);
        AvailableContentViews = contentType.AvailableContentViews.ToDictionary(x => x.GetLastPart(), x => x);
    }

    private async Task UpdateContentTypeId(Guid contentTypeId)
    {
        ContentType = await Mediator.Send(new GetContentTypeCommand { Id = contentTypeId });

        // Need to set the ContentType is this is new content
        if (ContentId == null)
        {
            Content.ContentTypeId = ContentType.Id;
        }

        SyncProperties(Content, ContentType);
    }

    private async Task Save()
    {
        if (await ValidateService.CanSave(Content!))
        {
            if (IsBlockList == true)
            {
                await ContentEditorModal.CloseAsync(ModalResult.Ok(Content));
            }
            else
            {
                var saveContentCommand = new SaveContentCommand { Content = [Content] };
                var result = await Mediator.Send(saveContentCommand);
                NotificationService.Notify(result.Success ? new NotificationMessage { Severity = NotificationSeverity.Success, Summary = $"{Content.Name} Saved", Detail = "", Duration = 4000 } : new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"{Content.Name} Error", Detail = "", Duration = 4000 });
                await AppState.NotifyContentSaved(Content, AuthState.User.GetUserName());
            }
        }
    }
    
}