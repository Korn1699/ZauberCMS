@using ZauberCMS.Components.Admin.ContentSection.Dialogs
@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Core.Shared
@using Content = ZauberCMS.Core.Content.Models.Content
@using ZauberCMS.Components.Admin.Trees
@implements ZauberCMS.Core.Sections.Interfaces.ISectionNav

<ContentTree Data="@ContentItems"
             OnChange="OnChange" 
             @bind-Value="@Selection" 
             OnItemContextMenu="ItemContextMenu"/>

@code {
    public int SortOrder => 0;
    public string SectionNavGroupAlias => Constants.Sections.SectionNavGroups.ContentNavGroup;
    
    [CascadingParameter] public IModalService ModalService { get; set; } = default!;
    
    [Inject] public IServiceProvider ServiceProvider { get; set; } = default!;
    [Inject] public ContextMenuService ContextMenuService { get; set; } = default!;
    [Inject] public NotificationService NotificationService { get; set; } = default!;
    [Inject] public DialogService ConfirmService { get; set; } = default!;
    [Inject] public IModalService DialogService { get; set; } = default!;
    [Inject] public AppState AppState { get; set; } = default!;
    

    private List<Content> ContentItems { get; set; } = [];
    private object? Selection { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await DataRefresh();
        AppState.OnContentChanged += HandleContentTreeChanged;
    }

    public void Dispose()
    {
        AppState.OnContentChanged -= HandleContentTreeChanged;
    }

    private async Task HandleContentTreeChanged(Content? content, string user)
    {
        await DataRefresh();
        StateHasChanged();
    }

    private async Task DataRefresh()
    {
        var items = await Mediator.Send(new QueryContentCommand
        {
            AmountPerPage = 1000,
            WhereClause = x => x.IsRootContent,
            IncludeUnpublished = true,
            IncludeChildren = true,
            OrderBy = GetContentsOrderBy.SortOrder
        });
        ContentItems = items.Items.ToList();
    }
    
    private static List<ContextMenuItem> MenuItems(TreeItemContextMenuEventArgs args)
    {
        var globalMenuItems = new List<ContextMenuItem>
        {
            new() { Text = "Create", Value = 1 },
            new() { Text = "Delete", Value = 2 },
            new() { Text = "Sort", Value = 3 }
        };
        
        
        var items = new List<ContextMenuItem>();
        
        if (args.Value is Content content)
        {
            items.AddRange(globalMenuItems);
            
            if (content.IsRootContent)
            {
                items.Add(new ContextMenuItem { Text = "Culture & Domains", Value =4 });
            }
            
        }
        
        return items;
    }

    private void ItemContextMenu(TreeItemContextMenuEventArgs args)
    {
        ContextMenuService.Open(args,
            MenuItems(args), async e =>
            {
                var content = (Content)args.Value;
                var dbContent = await Mediator.Send(new GetContentCommand { Id = content.Id, IncludeChildren = true });
                //var text = args.Text;
                switch(e.Value)
                {
                    case 1:
                        // Handle Create
                        NavigationManager.NavigateTo($"/admin/createcontent/{content.Id}", forceLoad: true);
                        break;
                    case 2:
                        // Confirm dialogue, say if there are children, and confirm then delete all
                            var hasChildren = dbContent.Children.Any();
                            var message = hasChildren
                                ? "The content you are trying to delete has child content, are you sure you want to delete it?"
                                : "Are you sure you want to delete this?";
                            var delete = await ConfirmService.Confirm(message, "Delete", new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });
                            if (delete == true)
                            {
                                var result = await Mediator.Send(new DeleteContentCommand{ContentId = dbContent.Id});
                                NotificationService.Notify(new NotificationMessage { 
                                    Severity = result.Success ? NotificationSeverity.Success : NotificationSeverity.Error, 
                                    Summary = result.Success ? "Success" : "Error", 
                                    Detail = result.Messages.MessagesAsString(), Duration = 4000 });
                                if (result.Success)
                                {
                                    NavigationManager.NavigateTo("/admin", forceLoad: true); 
                                }
                            }
            
                        break;
                    case 3:
                            if (!dbContent.Children.Any())
                            {
                                // Show message if no children
                                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Hmmmm", Detail = "Sorry, nothing to sort as this content has no children", Duration = 4000 });
                            }
                            else
                            {
                                ContextMenuService.Close();
                                var dialog = ModalService.OpenSidePanel<SortContent>("Sort Children", 
                                    new Dictionary<string, object>{ { "ContentId", dbContent.Id }, {"Content", dbContent.Children.OrderBy(x => x.SortOrder).ToList()} });
                                var result = await dialog.Result;
                                if (result is { Confirmed: true, Data: List<Content> sortedContent })
                                {
                                    foreach (var c in sortedContent)
                                    {
                                        var saveResult = await Mediator.Send(new SaveContentCommand {Content = c, ExcludePropertyData = true});
                                        if (!saveResult.Success)
                                        {
                                            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = saveResult.Messages.MessagesAsString(), Duration = 4000 });
                                        }
                                    }
                                    await DataRefresh();
                                    StateHasChanged();
                                }
                            }
         
                        break;
                    case 4:
                        ContextMenuService.Close();
                        var languageDialog = DialogService.OpenSidePanel<CultureDomains>("Domains & Culture", 
                            new Dictionary<string, object>
                            {
                                {"Content", content}
                            });
                        var languageDialogResult = await languageDialog.Result;
                        if (languageDialogResult is { Confirmed: true })
                        {
                            // TODO       
                        }    
         
                        break;
                }
            }
        );
    }

    private void OnChange()
    {
        if (Selection is Content content)
        {
            NavigationManager.NavigateTo($"/admin/updatecontent/{content.Id}");
            StateHasChanged();
        }
    }

}