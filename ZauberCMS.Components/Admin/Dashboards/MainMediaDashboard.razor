@using ZauberCMS.Core
@using ZauberCMS.Core.Media.Commands
@using ZauberCMS.Core.Media.Models
@implements ZauberCMS.Core.Sections.Interfaces.ISectionDashboard

<RadzenDataGrid AllowFiltering="false"
                FilterPopupRenderMode="PopupRenderMode.OnDemand"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowPaging="false"
                PageSize="20"
                AllowSorting="true"
                Data="@Contents"
                SelectionMode="DataGridSelectionMode.Single"
                RowSelect="@((Media value) => OnRowSelect(value))">
    <Columns>
        <RadzenDataGridColumn Property="MediaType" Title="Type">
            <Template Context="data">
                <RadzenIcon Icon="@data.MediaType.GetIcon()" />
            </Template>            
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Name" Title="Name"/>
        <RadzenDataGridColumn Property="FileSize" Title="Size"/>
        <RadzenDataGridColumn Property="DateUpdated" Title="Last Updated">
            <Template Context="data">
                @data.DateUpdated.Humanize()
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    public string TabName => "Latest Media";
    public int SortOrder => 0;
    public string SectionAlias => Constants.Sections.MediaSection;

    private IEnumerable<Media> Contents { get; set; } = Enumerable.Empty<Media>();

    protected override async Task OnInitializedAsync()
    {
        var items = await Mediator.Send(new QueryMediaCommand
        {
            AmountPerPage = 50,
            OrderBy = GetMediaOrderBy.DateUpdatedDescending,
            WhereClause = media => media.MediaType != MediaType.Folder
        });
        
        Contents = items.Items;
    }

    private void OnRowSelect(object value)
    {
        if (value is Media selectedRow)
        {
            NavigationManager.NavigateTo($"/admin/updatemedia/{selectedRow.Id}");
        }
    }

}