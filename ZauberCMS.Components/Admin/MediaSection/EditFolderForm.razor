@using Microsoft.AspNetCore.Components.Authorization
@using ZauberCMS.Core.Media.Commands
@using ZauberCMS.Core.Media.Models
@using ZauberCMS.Core.Shared.Services
@using ZauberCMS.Core.Shared

<EditForm Model="@Media" OnSubmit="Save">
    <RadzenRow class="rz-pb-6">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" class="w-100" Gap="2">
            <RadzenTextBox Style="width: 100%;" Name="Name" Placeholder="Name" @bind-Value="Media.Name" aria-label="Name"/>
        </RadzenStack>
    </RadzenRow>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center">
        <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Icon="save" Text="Save"/>
    </RadzenStack>
</EditForm>

@code {
    [Inject] NotificationService NotificationService { get; set; } = default!;
    [Inject] public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
    [Inject] public ValidateService<Media> ValidateService { get; set; } = default!;
    [Parameter] public Media? Media { get; set; }
    [Parameter] public Guid? ParentId { get; set; }
    
    protected override void OnInitialized()
    {
        Media ??= new Media
        {
            MediaType = MediaType.Folder
        };
    }

    private async Task Save()
    {
        if (await ValidateService.CanSave(Media!))
        {
            var saveCommand = new SaveMediaCommand { ParentFolderId = ParentId };
            saveCommand.MediaToSave.Add(Media!);
            var result = await Mediator.Send(saveCommand);
            if (result.All(x => x.Success))
            {
                NotificationService.ShowSuccessNotification("Saved");   
            }
            else
            {
                NotificationService.ShowNotifications("There was an issue", NotificationSeverity.Error, result.SelectMany(x => x.ErrorMessages).ToList());
            }
        }
    }
}