@using ZauberCMS.Core.Media.Models
@using ZauberCMS.Core
@using ZauberCMS.Core.Media.Commands
@using ZauberCMS.Core.Shared.Models
@page "/admin/createmedia"
@page "/admin/createfolder"
@page "/admin/createmedia/{ParentId:guid}"
@page "/admin/createfolder/{ParentId:guid}"
@page "/admin/updatemedia/{MediaId:guid}"
@layout SectionLayout

<PageTitle>Create & Update Content</PageTitle>

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Right" Gap="5" Style="margin-top: 0; padding-top: 0; padding-bottom: 10px;">
    <CreateMedia @key="@GetCompositeKey(MediaId, ParentId)" ParentId="ParentId" />
</RadzenStack>

<RadzenPanel Class="rz-mx-auto">
    
    @if (UpdateType == MediaUpdateType.Folder && Media != null)
    {
        <EditForm Model="@Media" OnSubmit="Save">
            <RadzenRow class="rz-pb-6">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" class="w-100" Gap="2">
                    <RadzenTextBox Style="width: 100%;" Name="Name" Placeholder="Name" @bind-Value="Media.Name" aria-label="Name"/>
                </RadzenStack>
            </RadzenRow>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center">
                <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Icon="save" Text="Save"/>
            </RadzenStack>
        </EditForm>
    }
    else
    {
        if (UpdateType != MediaUpdateType.Folder && Media != null)
        {
            <MediaUpload @key="@GetCompositeKey(MediaId, ParentId)" ParentId="@ParentId" MediaId="@Media.Id" MaxAllowedFiles="1" FilesToUpload="@(new List<FileSaveResult> { Media.ToFileSaveResult() })"/>
        }
        else
        {
            <MediaUpload @key="@GetCompositeKey(MediaId, ParentId)" ParentId="@ParentId"/>
        }
    }
</RadzenPanel>   

@code {
    [Parameter] public Guid? MediaId { get; set; }
    [Parameter] public Guid? ParentId { get; set; }

    [Inject] NotificationService NotificationService { get; set; } = default!;
    
    [CascadingParameter] protected SectionLayout? Layout { get; set; }

    private Media? Media { get; set; }
    private MediaUpdateType UpdateType { get; set; } = MediaUpdateType.Folder;

    protected override void OnInitialized()
    {
        Layout?.SetSection(Constants.Sections.MediaSection);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (NavigationManager.Uri.Contains("media", StringComparison.OrdinalIgnoreCase))
        {
            UpdateType = MediaUpdateType.Media;
        }

        if (MediaId.HasValue)
        {
            Media = await Mediator.Send(new GetMediaCommand { Id = MediaId });
            ParentId = Media.ParentId;
            UpdateType = Media.MediaType == MediaType.Folder ? MediaUpdateType.Folder : MediaUpdateType.Media;
        }
    }
    
    private static string GetCompositeKey(Guid? mediaId, Guid? parentId)
    {
        return $"{mediaId?.ToString() ?? "null"}_{parentId?.ToString() ?? "null"}";
    }
    
    private async Task Save()
    {
        if (UpdateType == MediaUpdateType.Folder)
        {
            var saveCommand = new SaveMediaCommand { ParentFolderId = ParentId};
            saveCommand.MediaToSave.Add(Media!);
            var result = await Mediator.Send(saveCommand);
            NotificationService.ShowSuccessNotification("Saved");
        }
    }

    private enum MediaUpdateType
    {
        Folder,
        Media
    }

}