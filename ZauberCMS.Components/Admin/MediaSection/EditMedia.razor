
@using ZauberCMS.Core.Media.Models
@using ZauberCMS.Core
@page "/admin/createmedia"
@page "/admin/createmedia/{ParentId:guid}"
@page "/admin/updatemedia/{MediaId:guid}"
@layout SectionLayout

<PageTitle>Create & Update Content</PageTitle>

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Right" Gap="5" Style="margin-top: 0; padding-top: 0; padding-bottom: 10px;">
    <RadzenButton Variant="Variant.Filled" Text="Create Content" Click=@(args => NavigationManager.NavigateTo("/admin/createcontent", forceLoad: true))/>
</RadzenStack>

<RadzenPanel Class="rz-mx-auto">
    <EditForm Model="@Media" OnSubmit="Save">
        <RadzenRow class="rz-pb-6">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" class="w-100" Gap="2">
                <RadzenTextBox Style="width: 100%;" Name="Name" Placeholder="Name" @bind-Value="Media.Name" aria-label="Name"/>
            </RadzenStack>
        </RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center">
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Icon="save" Text="Save"/>
        </RadzenStack>
    </EditForm>
</RadzenPanel>

@code {
    [Parameter] public Guid? MediaId { get; set; }
    [Parameter] public Guid? ParentId { get; set; }
    
    [CascadingParameter] protected SectionLayout? Layout { get; set; }

    private Media? Media { get; set; }
    
    protected override void OnInitialized()
    {
        Layout?.SetSection(Constants.Sections.MediaSection);
        if (MediaId.HasValue)
        {
            // TODO
        }
        else
        {
            Media = new Media();
        }
    }

    private static string GetCompositeKey(Guid? mediaId, Guid? parentId)
    {
        return $"{mediaId?.ToString() ?? "null"}_{parentId?.ToString() ?? "null"}";
    }
    
    private async Task Save()
    {
 
            /*var saveContentTypeCommand = new SaveContentTypeCommand { ContentType = ContentType };
            var result = await Mediator.Send(saveContentTypeCommand);
            NotificationService.Notify(result.Success ? new NotificationMessage { Severity = NotificationSeverity.Success, Summary = $"{ContentType.Name} Saved", Detail = "", Duration = 4000 } : new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"{ContentType.Name} Error", Detail = result.Messages.MessagesAsString(), Duration = 4000 });*/
       
    }

}