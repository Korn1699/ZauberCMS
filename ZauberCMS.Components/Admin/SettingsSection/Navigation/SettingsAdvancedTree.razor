@using ZauberCMS.Core.Shared.Models
@using ZauberCMS.Core.Shared
@using ZauberCMS.Components.Admin.Trees

@implements ZauberCMS.Core.Sections.Interfaces.ISectionNav

    <BaseTree
        T="TreeStub"
        Data="@AdvancedData"
        Expand="@OnExpandHandler"
        Change="@OnChange"
        @bind-Value="@Selection"
        HasChildren="@(e => HasChildren(e))"
        ShouldBeExpanded="@(e => ShouldBeExpanded(e))"
        Template="@(TreeExtensions.CreateStandardTreeTemplate<object>())">
    </BaseTree>

@code {
    
    public int SortOrder => 0;
    public string SectionNavGroupAlias => Constants.Sections.SectionNavGroups.SettingsAdvancedNavGroup;

    [Inject] public IServiceProvider ServiceProvider { get; set; } = default!;
    [Inject] public AppState AppState { get; set; } = default!;
    [Inject] public ContextMenuService ContextMenuService { get; set; } = default!;
    [Inject] public TreeState TreeState { get; set; } = default!;
    
    private IEnumerable<TreeStub> AdvancedData { get; set; } = [];
    
    private object? Selection { get; set; }

    private bool ShouldBeExpanded(object data)
    {
        switch (data)
        {
            case TreeStub tree:
                return TreeState.IsNodeExpanded(tree.Id);
            case TreeBranch branch:
                return TreeState.IsNodeExpanded(branch.Id);
            default:
                return false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        TreeState.OnTreeValueChanged += TreeStateOnOnTreeValueChanged;
        await DataRefresh();
    }

    /// <summary>
    /// Remove the selected state
    /// </summary>
    /// <param name="obj"></param>
    private void TreeStateOnOnTreeValueChanged(object obj)
    {
        if (obj != Selection)
        {
            Selection = null;
            StateHasChanged();
        }
    }

    private Task DataRefresh()
    {
        PrepareAdvancedTree();
        return Task.CompletedTask;
    }
    
    private bool HasChildren(object data)
    {
        return data switch
        {
            TreeStub tree => tree.Branches.Any(),
            TreeBranch branch => branch.Branches.Any(),
            _ => false
        };
    }
    
    private void OnExpandHandler(TreeExpandEventArgs args)
    {
        switch (args.Value)
        {
            case TreeStub treeStub:
                if (treeStub.Branches.Any())
                {
                    args.Children.Data = treeStub.Branches;
                    args.Children.TextProperty = "Name";
                    args.Children.Template = TreeExtensions.CreateStandardTreeTemplate<RadzenTreeItem>();
                    args.Children.HasChildren = HasChildren;
                    TreeState.NodeExpanded(treeStub.Id);
                }
                break;
            case TreeBranch branch:
                if (branch.Branches.Any())
                {
                    args.Children.Data = branch.Branches;
                    args.Children.TextProperty = "Name";
                    args.Children.Template = TreeExtensions.CreateStandardTreeTemplate<RadzenTreeItem>();   
                    args.Children.HasChildren = HasChildren;
                    TreeState.NodeExpanded(branch.Id);
                }
                break;
        }
    }
    
    private void PrepareAdvancedTree()
    {
        var tree = new List<TreeStub>();

        var auditTree = new TreeStub
        {
            Id = Constants.Guids.AuditTreeRootId,
            Name = "Audit Log",
            Icon = "sync_alt",
            SortOrder = 10,
            Url = "/admin/settings/auditlog"
        };

        tree.Add(auditTree);
        
        AdvancedData = tree;
    }

    void OnChange()
    {
        TreeState.TreeValue = Selection;
        switch (Selection)
        {
            case TreeStub treeStub:
            {
                if (!treeStub.Url.IsNullOrWhiteSpace())
                {
                    NavigationManager.NavigateTo(treeStub.Url);
                }

                break;
            }
        }
    }

    public void Dispose()
    {
        TreeState.OnTreeValueChanged -= TreeStateOnOnTreeValueChanged;
    }

}