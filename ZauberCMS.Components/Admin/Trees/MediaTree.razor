@using ZauberCMS.Core.Media.Commands
@using ZauberCMS.Core.Media.Models

<BaseTree T="Media"
          Data="@Data"
          OnExpand="@OnExpandHandler"
          OnChange="@OnChangeHandler"
          OnItemContextMenu="@OnItemContextMenuHandler"
          @bind-Value="@Value"
          HasChildren="@(e => HasChildren(e))"
          ShouldBeExpanded="@(e => ShouldBeExpanded(e))"
          Template="@(CreateTreeTemplate<object>())">
</BaseTree>

@code {
    [Parameter] public IEnumerable<Media> Data { get; set; } = Enumerable.Empty<Media>();
    [Parameter] public EventCallback<TreeExpandEventArgs> OnExpand { get; set; }
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public EventCallback<TreeItemContextMenuEventArgs> OnItemContextMenu { get; set; }
    [Parameter] public object? Value { get; set; }
    [Parameter] public EventCallback<object> ValueChanged { get; set; }

    private RadzenTree Tree { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        if (!Data.Any())
        {
            var items = await Mediator.Send(new QueryMediaCommand
            {
                AmountPerPage = 100,
                WhereClause = x => x.ParentId == null,
                IncludeChildren = true
            });
            Data = items.Items;
        }
    }

    private async Task OnExpandHandler(TreeExpandEventArgs args)
    {
        if (OnExpand.HasDelegate)
        {
            await OnExpand.InvokeAsync(args);
        }
        else
        {
            if (args.Value is Media media)
            {
                var items = Mediator.Send(new QueryMediaCommand
                {
                    WhereClause = x => x.ParentId == media.Id,
                    OrderBy = GetMediaOrderBy.Name
                }).GetAwaiter().GetResult();
                args.Children.Data = items.Items;
                args.Children.TextProperty = "Name";
                args.Children.Template = CreateTreeTemplate<RadzenTreeItem>();
            }
        }
    }


    private RenderFragment<T> CreateTreeTemplate<T>() where T : class
    {
        return context => builder =>
        {
            var treeItem = context as RadzenTreeItem;
            if (treeItem?.Value is Media media)
            {
                builder.OpenComponent<RadzenIcon>(0);
                builder.AddAttribute(1, "Icon", media.MediaType.GetIcon());
                
                //TODO - This styling should be a constant?
                builder.AddAttribute(2, "style", "font-weight: 300; color: dimgray;");
                builder.CloseComponent();
                builder.AddContent(3, media.Name);
            }
        };
    }

    private async Task OnChangeHandler()
    {
        await ValueChanged.InvokeAsync(Value);
        if (OnChange.HasDelegate)
        {
            await OnChange.InvokeAsync();
        }
    }

    private async Task OnItemContextMenuHandler(TreeItemContextMenuEventArgs args)
    {
        if (OnItemContextMenu.HasDelegate)
        {
            await OnItemContextMenu.InvokeAsync(args);
        }
    }

    private bool HasChildren(object data)
    {
        if (data is Media { MediaType: MediaType.Folder } media)
        {
            return media.Children.Any();   
        }

        return false;
    }

    private bool ShouldBeExpanded(object data)
    {
        /*
        if (data is Media { MediaType: MediaType.Folder } media)
        {
            return HasChildren(media) && media.ParentId == null;
        }
        */

        return false;
    }

}