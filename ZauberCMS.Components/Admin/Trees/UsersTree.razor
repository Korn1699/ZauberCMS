@using ZauberCMS.Core.Shared.Models

<BaseTree
    T="TreeStub"
    Data="@Data"
    OnExpand="@OnExpandHandler"
    OnChange="@OnChangeHandler"
    OnItemContextMenu="@OnItemContextMenuHandler"
    @bind-Value="@Value"
    HasChildren="@(e => HasChildren(e))"
    ShouldBeExpanded="@(e => ShouldBeExpanded(e))"
    Template="@(CreateTreeTemplate<object>())">
</BaseTree>

@code {
    [Parameter] public IEnumerable<TreeStub> Data { get; set; } = [];
    [Parameter] public EventCallback<TreeExpandEventArgs> OnExpand { get; set; }
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public EventCallback<TreeItemContextMenuEventArgs> OnItemContextMenu { get; set; }
    [Parameter] public object? Value { get; set; }
    [Parameter] public EventCallback<object> ValueChanged { get; set; }

    private RadzenTree Tree { get; set; } = default!;

    private async Task OnExpandHandler(TreeExpandEventArgs args)
    {
        if (OnExpand.HasDelegate)
        {
            await OnExpand.InvokeAsync(args);
        }
        else
        {
            switch (args.Value)
            {
                case TreeStub treeStub:
                    args.Children.Data = treeStub.Branches;
                    args.Children.TextProperty = "Name";
                    args.Children.Template = CreateTreeTemplate<RadzenTreeItem>();
                    args.Children.HasChildren = HasChildren;
                    break;
                case TreeBranch branch:
                    args.Children.Data = branch.Branches;
                    args.Children.TextProperty = "Name";
                    args.Children.Template = CreateTreeTemplate<RadzenTreeItem>();
                    args.Children.HasChildren = HasChildren;
                    break;
            }
        }
    }


    private RenderFragment<T> CreateTreeTemplate<T>() where T : class
    {
        return context => builder =>
        {
            var treeItem = context as RadzenTreeItem;
            builder.OpenComponent<RadzenIcon>(0);
            switch (treeItem?.Value)
            {
                case TreeStub treeStub:
                    builder.AddAttribute(1, "Icon", treeStub.Icon);
                    builder.AddAttribute(2, "style", "font-weight: 300; color: dimgray;");
                    builder.CloseComponent();
                    builder.AddContent(3, treeStub.Name);
                    break;
                case TreeBranch branch:
                    builder.AddAttribute(1, "Icon", branch.Icon);
                    builder.AddAttribute(2, "style", "font-weight: 300; color: dimgray;");
                    builder.CloseComponent();
                    builder.AddContent(3, branch.Name);
                    break;
            }
        };
    }

    private async Task OnChangeHandler()
    {
        await ValueChanged.InvokeAsync(Value);
        if (OnChange.HasDelegate)
        {
            await OnChange.InvokeAsync();
        }
    }

    private async Task OnItemContextMenuHandler(TreeItemContextMenuEventArgs args)
    {
        if (OnItemContextMenu.HasDelegate)
        {
            await OnItemContextMenu.InvokeAsync(args);
        }
    }

    private bool HasChildren(object data)
    {
        return data switch
        {
            TreeStub tree => tree.Branches.Any(),
            TreeBranch branch => branch.Branches.Any(),
            _ => false
        };
    }

    private bool ShouldBeExpanded(object data)
    {
        return data switch
        {
            TreeStub tree => tree.Branches.Any(),
            _ => false
        };
    }

}