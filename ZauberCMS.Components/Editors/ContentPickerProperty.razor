@using ZauberCMS.Components.Admin.Trees
@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Components.Editors.Settings
@using System.Text.Json
@implements ZauberCMS.Core.Content.Interfaces.IContentProperty


<RadzenDropZoneContainer TItem="Content" Data="ContentItems"
                         ItemSelector="@_itemSelector"
                         CanDrop="@_canDrop"
                         Drop="@OnDrop">
    <ChildContent>
        <RadzenDropZone Class="rz-display-flex rz-flex-column rz-py-3" Style="flex: 1; gap: 1rem; width: 100%;">
        </RadzenDropZone>
    </ChildContent>
    <Template>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
            <div style="width: 100%;">
                <RadzenAlert Icon="@context.ContentType?.Icon" Close="@(() => DeleteContent(context))" Style="margin: 0; padding-top: 3px; padding-bottom: 3px;">
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="0">
                        @context.Name
                    </RadzenStack>
                </RadzenAlert>
            </div>
        </RadzenStack>

    </Template>
</RadzenDropZoneContainer>

<RadzenStack Orientation="Orientation.Vertical" Gap="1rem" class="rz-pt-3" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Start">
    <RadzenButton Click="@(() => AddContent())">Add Content</RadzenButton>
</RadzenStack>


@code {
    public string Name { get; set; } = "Content Picker";
    public string Alias { get; set; } = "ZauberCMS.ContentPicker";
    public string Description { get; set; } = "Content picker using the content tree";
    public string Icon { get; set; } = "account_tree";
    public Type? SettingsComponent { get; set; } = typeof(ContentPickerPropertySettings);

    [Parameter] public string Value { get; set; } = string.Empty;
    [Parameter] public string Settings { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public Content? Content { get; set; }
    [Parameter] public IModalService? ModalService { get; set; }

    // Hold the content guid and name in the list
    private List<Content> ContentItems { get; set; } = [];
    private readonly Func<Content, RadzenDropZone<Content>, bool> _itemSelector = (item, zone) => true;
    private readonly Func<RadzenDropZoneItemEventArgs<Content>, bool> _canDrop = request => true;
    private IModalReference? Modal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!Value.IsNullOrWhiteSpace())
        {
            var contentIds = JsonSerializer.Deserialize<List<Guid>>(Value);
            if (contentIds != null && contentIds.Any())
            {
                var contentItems = await Mediator.Send(new QueryContentCommand
                {
                    Ids = contentIds
                });
                ContentItems = contentItems.Items.ToList();
            }
        }
        // TODO - Need to add settings to restrict amount allowed to be picked (Also can I restrict whats allowed to be picked by content type?)
    }

    private async Task DeleteContent(Content content)
    {
        var index = ContentItems.FindIndex(c => c.Id == content.Id);
        if (index != -1)
        {
            ContentItems.RemoveAt(index);
            await SaveAndUpdate();
        }
    }

    private async Task OnDrop(RadzenDropZoneItemEventArgs<Content> args)
    {
        if (args.ToItem != null && args.ToItem != args.Item)
        {
            ContentItems.Remove(args.Item);
            ContentItems.Insert(ContentItems.IndexOf(args.ToItem), args.Item);
            await SaveAndUpdate();
        }
    }

    private void AddContent()
    {
        var parameters = new Dictionary<string, object>
        {
            { nameof(ContentTree.ValueChanged), EventCallback.Factory.Create<object>(this, OnValueChangedHandler) }
        };

        Modal = ModalService?.OpenSidePanel<ContentTree>("Choose Content", parameters);
    }

    private async Task OnValueChangedHandler(object value)
    {
        if (value is Content content)
        {
            ContentItems.Add(content);
            await SaveAndUpdate();
        }

        Modal?.Close();
    }

    private async Task SaveAndUpdate()
    {
        Value = JsonSerializer.Serialize(ContentItems.Select(x => x.Id));
        await ValueChanged.InvokeAsync(Value);
    }

}