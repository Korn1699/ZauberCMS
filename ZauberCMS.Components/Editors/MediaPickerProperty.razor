@using System.Text.Json
@using ZauberCMS.Components.Admin.MediaSection.Dialogs
@using ZauberCMS.Components.Admin.Trees
@using ZauberCMS.Components.Editors.Models
@using ZauberCMS.Components.Editors.Settings
@using ZauberCMS.Core.Media.Commands
@using ZauberCMS.Core.Media.Models
@using TupleExtensions = ZauberCMS.Core.Extensions.TupleExtensions
@implements ZauberCMS.Core.Content.Interfaces.IContentProperty

<SortableList Id="@Alias" Items="@MediaItems" OnUpdate="@SortList" Context="item">
    <SortableItemTemplate>
        <div>
            <PickerItem Text="@item.Name"
                        Icon="@item.MediaType.GetIcon()"
                        Image="@(item.MediaType == MediaType.Image ? item.Url : string.Empty)"
                        Close="@(() => DeleteMedia(item))"/>
        </div>
    </SortableItemTemplate>
</SortableList>

<RadzenStack Orientation="Orientation.Vertical" Gap="1rem" class="rz-pt-3" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Start">
    <RadzenButton Click="@(() => AddMedia())" Variant="Variant.Text">Add Media</RadzenButton>
</RadzenStack>

@code {
    [Inject] NotificationService NotificationService { get; set; } = default!;
    [Inject] public ContextMenuService ContextMenuService { get; set; } = default!;

    public string Name { get; set; } = "Media Picker";
    public string Alias { get; set; } = "ZauberCMS.MediaPicker";
    public string Description { get; set; } = "Media picker using the media tree";
    public string Icon { get; set; } = "image";
    public Type? SettingsComponent { get; set; } = typeof(MediaPickerPropertySettings);

    [Parameter] public string? Value { get; set; } = string.Empty;
    [Parameter] public string? Settings { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public Content? Content { get; set; }
    [CascadingParameter] public IModalService? ModalService { get; set; }

    // Hold the content guid and name in the list
    private List<Media> MediaItems { get; set; } = [];
    private IModalReference? Modal { get; set; }
    private IModalReference? CreateFolderModal { get; set; }
    private MediaPickerSettings SettingsModel { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (!Value.IsNullOrWhiteSpace())
        {
            var contentIds = JsonSerializer.Deserialize<List<Guid>>(Value);
            if (contentIds != null && contentIds.Any())
            {
                var contentItems = await Mediator.Send(new QueryMediaCommand
                {
                    Ids = contentIds
                });
                MediaItems = contentItems.Items.ToList();
            }
        }

        SettingsModel = Settings.FromJson<MediaPickerSettings>();
    }

    private void SortList((int oldIndex, int newIndex) indices)
    {
        TupleExtensions.SortList(indices, MediaItems);
        StateHasChanged();
    }

    private async Task DeleteMedia(Media media)
    {
        var index = MediaItems.FindIndex(c => c.Id == media.Id);
        if (index != -1)
        {
            MediaItems.RemoveAt(index);
            await SaveAndUpdate();
        }
    }

    private void AddMedia()
    {
        var parameters = new Dictionary<string, object>
        {
            { nameof(MediaTree.ValueChanged), EventCallback.Factory.Create<object>(this, OnValueChangedHandler) },
            { nameof(MediaTree.OnItemContextMenu), EventCallback.Factory.Create<TreeItemContextMenuEventArgs>(this, ItemContextMenu) }
        };

        Modal = ModalService?.OpenSidePanel<MediaTree>("Choose Media", parameters);
    }

    private static List<ContextMenuItem> MediaContextMenuItems(TreeItemContextMenuEventArgs args)
    {
        var items = new List<ContextMenuItem>();
        // Some logic here
        if (args.Value is Media { MediaType: MediaType.Folder })
        {
            items.Add(new ContextMenuItem { Text = "Create Folder", Value = 1 });
            items.Add(new ContextMenuItem { Text = "Upload Media", Value = 1 });
        }

        return items;
    }

    private void ItemContextMenu(TreeItemContextMenuEventArgs args)
    {
        ContextMenuService.Open(args,
            MediaContextMenuItems(args),
            e =>
            {
                var media = (Media)args.Value;
                switch (e.Value)
                {
                    case 1:
                        var parameters = new Dictionary<string, object>
                        {
                            { nameof(UpdateMediaForm.ParentId), media.Id },
                            { nameof(UpdateMediaForm.ValueChanged), EventCallback.Factory.Create<Media>(this, OnFolderCreate) }
                        };
                        ContextMenuService.Close();
                        CreateFolderModal = ModalService?.OpenSidePanel<UpdateMediaForm>("Create Folder", parameters);
                        break;
                    case 2:
                        NotificationService.ShowErrorNotification("deleteResult.Messages.MessagesAsString()");
                        break;
                }
            }
        );
    }

    private void OnFolderCreate(Media value)
    {
        CreateFolderModal?.Close();
    }

    private async Task OnValueChangedHandler(object value)
    {
        if (SettingsModel.MaxAllowed != null && MediaItems.Count >= SettingsModel.MaxAllowed)
        {
            Modal?.Close();
            NotificationService.ShowErrorNotification($"You can only pick {SettingsModel.MaxAllowed}");
            return;
        }

        if (value is Media media)
        {
            if (SettingsModel.AllowedMediaTypes != null)
            {
                if (!SettingsModel.AllowedMediaTypes.Contains(media.MediaType))
                {
                    NotificationService.ShowErrorNotification("You are not allowed to pick that media type");
                    return;
                }
            }

            MediaItems.Add(media);
            await SaveAndUpdate();
            Modal?.Close();
        }
    }

    private async Task SaveAndUpdate()
    {
        Value = JsonSerializer.Serialize(MediaItems.Select(x => x.Id));
        await ValueChanged.InvokeAsync(Value);
    }

}