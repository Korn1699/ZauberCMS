@using System.Text.Json
@using ZauberCMS.Components.Admin.Trees
@using ZauberCMS.Components.Editors.Models
@using ZauberCMS.Components.Editors.Settings
@using ZauberCMS.Core.Media.Commands
@using ZauberCMS.Core.Media.Models
@implements ZauberCMS.Core.Content.Interfaces.IContentProperty

<RadzenDropZoneContainer TItem="Media" Data="MediaItems"
                         ItemSelector="@_itemSelector"
                         CanDrop="@_canDrop"
                         Drop="@OnDrop">
    <ChildContent>
        <RadzenDropZone Class="rz-display-flex rz-flex-column rz-py-3" Style="flex: 1; gap: 1rem; width: 100%;">
        </RadzenDropZone>
    </ChildContent>
    <Template>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
            <div style="width: 100%;">
                <RadzenAlert Icon="@context.MediaType.GetIcon()" Close="@(() => DeleteMedia(context))" Style="margin: 0; padding-top: 3px; padding-bottom: 3px;">
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="0">
                        @context.Name
                    </RadzenStack>
                </RadzenAlert>
            </div>
        </RadzenStack>

    </Template>
</RadzenDropZoneContainer>

<RadzenStack Orientation="Orientation.Vertical" Gap="1rem" class="rz-pt-3" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Start">
    <RadzenButton Click="@(() => AddMedia())">Add Media</RadzenButton>
</RadzenStack>


@code {
    [Inject] NotificationService NotificationService { get; set; } = default!;

    public string Name { get; set; } = "Media Picker";
    public string Alias { get; set; } = "ZauberCMS.MediaPicker";
    public string Description { get; set; } = "Media picker using the media tree";
    public string Icon { get; set; } = "image";
    public Type? SettingsComponent { get; set; } = typeof(MediaPickerPropertySettings);

    [Parameter] public string Value { get; set; } = string.Empty;
    [Parameter] public string Settings { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public Content? Content { get; set; }
    [Parameter] public IModalService? ModalService { get; set; }

    // Hold the content guid and name in the list
    private List<Media> MediaItems { get; set; } = [];
    private readonly Func<Media, RadzenDropZone<Media>, bool> _itemSelector = (item, zone) => true;
    private readonly Func<RadzenDropZoneItemEventArgs<Media>, bool> _canDrop = request => true;
    private IModalReference? Modal { get; set; }
    private MediaPickerSettings SettingsModel { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (!Value.IsNullOrWhiteSpace())
        {
            var contentIds = JsonSerializer.Deserialize<List<Guid>>(Value);
            if (contentIds != null && contentIds.Any())
            {
                var contentItems = await Mediator.Send(new QueryMediaCommand
                {
                    Ids = contentIds
                });
                MediaItems = contentItems.Items.ToList();
            }
        }

        if (!Settings.IsNullOrWhiteSpace())
        {
            SettingsModel = JsonSerializer.Deserialize<MediaPickerSettings>(Settings) ?? new MediaPickerSettings();
        }
    }

    private async Task DeleteMedia(Media media)
    {
        var index = MediaItems.FindIndex(c => c.Id == media.Id);
        if (index != -1)
        {
            MediaItems.RemoveAt(index);
            await SaveAndUpdate();
        }
    }

    private async Task OnDrop(RadzenDropZoneItemEventArgs<Media> args)
    {
        if (args.ToItem != null && args.ToItem != args.Item)
        {
            MediaItems.Remove(args.Item);
            MediaItems.Insert(MediaItems.IndexOf(args.ToItem), args.Item);
            await SaveAndUpdate();
        }
    }

    private void AddMedia()
    {
        var parameters = new Dictionary<string, object>
        {
            { nameof(MediaTree.ValueChanged), EventCallback.Factory.Create<object>(this, OnValueChangedHandler) }
        };

        Modal = ModalService?.OpenSidePanel<MediaTree>("Choose Media", parameters);
    }

    private async Task OnValueChangedHandler(object value)
    {
        if (SettingsModel.MaxAllowed != null && MediaItems.Count > SettingsModel.MaxAllowed)
        {
            Modal?.Close();
            NotificationService.ShowErrorNotification($"You can only pick {SettingsModel.MaxAllowed}");
            return;
        }

        if (value is Media media)
        {
            if (SettingsModel.AllowedMediaTypes != null)
            {
                if (!SettingsModel.AllowedMediaTypes.Contains(media.MediaType))
                {
                    NotificationService.ShowErrorNotification("You are not allowed to pick that media type");
                }
                return;
            }

            MediaItems.Add(media);
            await SaveAndUpdate();
        }
    }

    private async Task SaveAndUpdate()
    {
        Value = JsonSerializer.Serialize(MediaItems.Select(x => x.Id));
        await ValueChanged.InvokeAsync(Value);
    }

}