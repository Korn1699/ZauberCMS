@*@attribute [StreamRendering]*@
@page "/{**slug}"
@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Core.Content.Interfaces
@using ZauberCMS.Core.Plugins
@using ZauberCMS.Core.Shared.Services

@if (IsAdmin)
{
    @* Render nothing for admin pages to avoid flashing text *@
}
else if (Content != null)
{
    if (ComponentView != null)
    {
        <LayoutView Layout="LayoutType">
            <DynamicComponent Type="@ComponentView.GetType()" Parameters="@Parameters" />
        </LayoutView>
    }
    else
    {
        @* Should really make these pages and redirect to them *@
        @*<LayoutView Layout="typeof(BlankLayout)">
            <MissingView />
        </LayoutView>*@
        <p>404 Test</p>
    }
}
else
{
    @* Should really make these pages and redirect to them *@
    @*<LayoutView Layout="typeof(BlankLayout)">
        <NotFound404 />
    </LayoutView>*@
    <p>Missing View Test</p>
}

@code {
    
    [Inject] public ExtensionManager ExtensionManager { get; set; } = default!;
    [Inject] public LayoutResolverService LayoutResolver { get; set; } = default!;
    
    [Parameter] public string? Slug { get; set; }
    
    [CascadingParameter] public bool IsAdmin { get; set; }

    private Content? Content { get; set; }
    private Dictionary<string, IContentView> AllContentViews { get; set; } = new();
    private IContentView? ComponentView { get; set; }
    private Dictionary<string, object> Parameters { get; set; } = new();
    private Type LayoutType { get; set; } = default!;
    //private bool IsAdminPage { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        // Exclude admin paths with case-insensitive comparison
        //IsAdminPage = Slug != null && Slug.StartsWith(Constants.Urls.AdminBaseUrl.Replace("/", ""), StringComparison.OrdinalIgnoreCase);
        if (IsAdmin)
        {
            return;
        }

        AllContentViews = ExtensionManager.GetInstances<IContentView>(true);
        Content = await Mediator.Send(new GetContentBySlugCommand { Slug = Slug, IsRootContent = Slug == null });
        
        if (Content != null)
        {
            if (AllContentViews.TryGetValue(Content.ViewComponent, out var contentView))
            {
                ComponentView = contentView;
                LayoutType = LayoutResolver.GetLayoutType(ComponentView.GetType());
                Parameters = new Dictionary<string, object> { ["Content"] = Content };
            }
        }
    }
    
}