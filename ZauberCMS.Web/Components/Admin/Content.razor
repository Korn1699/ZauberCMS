@page "/content"
@page "/admin"
@using ZauberCMS.Core.Content.Commands
@layout AdminLayout

<PageTitle>Content</PageTitle>

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Reverse="true" Gap="5" Style="margin-top: 0; padding-top: 0;">
    <RadzenButton Variant="Variant.Filled" Text="Create Content" Click=@(args => NavigationManager.NavigateTo("/createcontent")) />
</RadzenStack>

<RadzenDataGrid AllowFiltering="false"
                FilterPopupRenderMode="PopupRenderMode.OnDemand"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowPaging="false"
                PageSize="20"
                AllowSorting="true"
                Data="@Contents"
                SelectionMode="DataGridSelectionMode.Single"
                RowSelect="@((ZauberCMS.Core.Content.Models.Content value) => OnRowSelect(value))">
                @*@bind-Value="@SelectedContent"*@
    <Columns>
        @*<RadzenDataGridColumn Property="Photo" Title="Employee" Sortable="false" Filterable="false">
            <Template Context="data">
                <RadzenImage Path="@data.Photo" style="width: 40px; height: 40px; border-radius: 8px; margin-right: 8px;" AlternateText="@(data.FirstName + " " + data.LastName)" />
                @data.FirstName @data.LastName
            </Template>
        </RadzenDataGridColumn>*@
        <RadzenDataGridColumn Property="Name" Title="Name"/>
        <RadzenDataGridColumn Property="DateUpdated" Title="Last Updated" FormatString="{0:d}"/>
    </Columns>
</RadzenDataGrid>


<SectionContent SectionId="AdminLayout.Sections.HeaderBeginning">
    <RadzenSidebarToggle Click="@(() => ToggleSideBar())" />
</SectionContent>

<SectionContent SectionId="AdminLayout.Sections.SideBar">
    <RadzenSidebar @bind-Expanded="@Expanded">
        <div class="rz-p-4">
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Content</RadzenText>
        </div>
        <ContentTree />
    </RadzenSidebar>
</SectionContent>

@code {

    private IList<Core.Content.Models.Content> SelectedContent { get; set; }
    private IEnumerable<Core.Content.Models.Content> Contents { get; set; } = Enumerable.Empty<Core.Content.Models.Content>();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        var items = await Mediator.Send(new GetContentsCommand
        {  
            AmountPerPage = 20,
            OrderBy = GetContentsOrderBy.DateUpdatedDescending
        });
        Contents = items.Items;
    }
    
    private void OnRowSelect(object value)
    {
        if (value is Core.Content.Models.Content selectedRow)
        {
            NavigationManager.NavigateTo($"/createcontent/{selectedRow.Id}");
        }
    }

}