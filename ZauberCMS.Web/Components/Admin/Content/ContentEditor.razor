@using ZauberCMS.Core
@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Core.Content.Interfaces
@using ZauberCMS.Core.Shared
@using ZauberCMS.Core.Plugins
@page "/admin/createcontent"
@page "/admin/createcontent/{ParentId:guid}"
@page "/admin/updatecontent/{ContentId:guid}"
@layout SectionLayout

<PageTitle>Create & Update Content</PageTitle>

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Right" Gap="5" Style="margin-top: 0; padding-top: 0; padding-bottom: 10px;">
    <RadzenButton Variant="Variant.Filled" Text="Create Content" Click=@(args => NavigationManager.NavigateTo("/admin/createcontent", forceLoad: true))/>
</RadzenStack>

<RadzenPanel Class="rz-mx-auto">
    @if (ContentType != null)
    {
        <EditForm Model="@Content" OnSubmit="Save">
            <RadzenRow class="rz-pb-2">
                <RadzenTextBox Style="width: 100%;" Name="Name" Placeholder="Name" Value="@Content.Name" ValueChanged="@((string name) => { Content.Name = name; })" aria-label="Name"/>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="0">
                    <RadzenIcon Icon="schedule" Style="line-height: 20px; height: 20px; font-size: 20px;" IconStyle="IconStyle.Light"/> <RadzenText TextStyle="TextStyle.Caption" Style="margin: 0; padding: 0;">Last Updated: @Content.DateUpdated.Humanize()</RadzenText>
                </RadzenStack>
            </RadzenRow>

            <RadzenTabs @ref="Tabs" RenderMode="TabRenderMode.Client" Change="@(i => TabChange(i))">
                <Tabs>
                    @foreach (var tab in ContentType.Tabs.OrderBy(x => x.SortOrder))
                    {
                        <RadzenTabsItem>
                            <Template Context="tabContext">
                                @tab.Name
                            </Template>
                            <ChildContent>
                                <RadzenStack Gap="1rem">
                                    @foreach (var property in ContentType.ContentProperties
                                                  .Where(x => x.TabId == tab.Id)
                                                  .OrderBy(x => x.SortOrder))
                                    {
                                        if (property.Component != null)
                                        {
                                            AllContentTypeProperties.TryGetValue(property.Component, out var contentPropertyComponent);
                                            if (contentPropertyComponent != null)
                                            {
                                                AllContentValues.TryGetValue(property.Id, out var contentValue);
                                                if (contentValue != null)
                                                {
                                                    <EditorRow>
                                                        <LeftColumn>
                                                            <RadzenLabel Style="font-weight: 600;font-size: 14px;" Text="@property.Name"/>
                                                            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="0">
                                                                <RadzenIcon Icon="lock_outline" IconStyle="IconStyle.Light"/> <RadzenText TextStyle="TextStyle.Caption" Style="margin: 0; padding: 0;">@property.Alias</RadzenText>
                                                            </RadzenStack>
                                                            <RadzenLabel Style="font-size: 14px;" Text="@property.Description"/>
                                                        </LeftColumn>
                                                        <CentreColumn>
                                                            <DynamicContentProperty ComponentType="@contentPropertyComponent.GetType()"
                                                                                    Settings="@property.Settings"
                                                                                    Content="@Content"
                                                                                    Value="@contentValue.Value"
                                                                                    ValueChanged="@(value => UpdateProperty(contentValue.ContentTypePropertyId, value))"/>
                                                        </CentreColumn>
                                                    </EditorRow>
                                                }
                                            }
                                        }
                                    }

                                </RadzenStack >
                            </ChildContent>
                        </RadzenTabsItem>
                    }

                    <RadzenTabsItem Text="System">
                        <EditorRow>
                            <LeftColumn>
                                <RadzenLabel Text="Id"/>
                            </LeftColumn>
                            <CentreColumn>
                                @Content.Id
                            </CentreColumn>
                        </EditorRow>

                        <EditorRow>
                            <LeftColumn>
                                <RadzenLabel Text="Url"/>
                            </LeftColumn>
                            <CentreColumn>
                                <RadzenTextBox Style="width: 100%;" Name="Url" @bind-Value="@Content.Url"/>
                            </CentreColumn>
                        </EditorRow>

                        <EditorRow>
                            <LeftColumn>
                                <RadzenLabel Text="Internal Redirect Id"/>
                            </LeftColumn>
                            <CentreColumn>
                                <RadzenTextBox Style="width: 100%;" Name="InternalRedirectId" @bind-Value="@Content.InternalRedirectIdAsString"/>
                            </CentreColumn>
                        </EditorRow>

                        <EditorRow>
                            <LeftColumn>
                                <RadzenLabel Text="Content View"/>
                            </LeftColumn>
                            <CentreColumn>
                                <RadzenDropDown @bind-Value="@Content.ViewComponent" Data="@AvailableContentViews" TextProperty="Key" ValueProperty="Value" Style="width: 100%; max-width: 400px;"/>
                            </CentreColumn>
                        </EditorRow>
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center">
                <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Icon="save" Text="Save"/>
            </RadzenStack>

        </EditForm>
    }
    else
    {
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Reverse="true" Gap="5" Style="margin-top: 0; padding-top: 0;">
            <RadzenButton Variant="Variant.Filled" Text="Choose Content Type" Click="@ChooseContentType"/>
        </RadzenStack>
    }

</RadzenPanel>


@code {

    [Inject] public DialogService DialogService { get; set; } = default!;
    [Inject] public NotificationService NotificationService { get; set; } = default!;
    [Inject] public ExtensionManager ExtensionManager { get; set; } = default!;
    [Inject] public AppState AppState { get; set; } = default!;

    [Parameter] public Guid? ContentId { get; set; }
    [Parameter] public Guid? ParentId { get; set; }
    
    [CascadingParameter] protected SectionLayout? Layout { get; set; }

    private Content Content { get; set; } = new() { IsRootContent = true };
    private ContentType? ContentType { get; set; }
    private Dictionary<string, IContentProperty> AllContentTypeProperties { get; set; } = new();
    private Dictionary<Guid, ContentValue> AllContentValues { get; set; } = new();
    private Dictionary<string, string> AvailableContentViews { get; set; } = new();
    private int SelectedTabIndex { get; set; }
    private RadzenTabs Tabs { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Layout?.SetSection(Constants.Sections.ContentSection);
    }

    protected override async Task OnParametersSetAsync()
    {
        AllContentTypeProperties = ExtensionManager.GetInstances<IContentProperty>(true);
        if (ContentId != null)
        {
            Content = await Mediator.Send(new GetContentCommand { Id = ContentId.Value });
            ContentType = await Mediator.Send(new GetContentTypeCommand { Id = Content.ContentTypeId });
            SyncProperties(Content, ContentType);
        }
        else if (ParentId != null)
        {
            Content.ParentId = ParentId;
            Content.IsRootContent = false;
        }
    }

    private void TabChange(int i)
    {
        SelectedTabIndex = i;
    }

    private void UpdateProperty(Guid ctpId, string value)
    {
        var property = Content?.ContentPropertyData.FirstOrDefault(p => p.ContentTypePropertyId == ctpId);
        if (property != null)
        {
            property.Value = value;
            property.DateUpdated = DateTime.UtcNow;
        }
    }

    private void SyncProperties(Content content, ContentType contentType)
    {
        var toRemove = new List<ContentValue>();
        // Check for properties that were removed
        foreach (var cpd in content.ContentPropertyData)
        {
            var existsInContentType = contentType.ContentProperties.Any(x => x.Id == cpd.ContentTypePropertyId);
            if (!existsInContentType)
            {
                // Mark for removal
                toRemove.Add(cpd);
            }
        }

        // Remove the properties
        foreach (var tr in toRemove)
        {
            content.ContentPropertyData.Remove(tr);
        }

        // Check for properties to add
        foreach (var ctp in contentType.ContentProperties)
        {
            var exists = content.ContentPropertyData.FirstOrDefault(x => x.ContentTypePropertyId == ctp.Id);
            if (exists == null)
            {
                // Add it
                content.ContentPropertyData.Add(new ContentValue
                {
                    ContentTypePropertyId = ctp.Id,
                    Alias = ctp.Alias
                });
            }
        }

        AllContentValues = Content.ContentPropertyData.ToDictionary(x => x.ContentTypePropertyId, x => x);
        AvailableContentViews = contentType.AvailableContentViews.ToDictionary(x => x.GetLastPart(), x => x);
    }

    private async Task ChooseContentType()
    {
        var rootOnly = ContentId == null && ParentId == null;
        var result = await DialogService.OpenSideAsync<ListContentTypes>("Choose Content Type",
            new Dictionary<string, object> { { "RootOnly", rootOnly } },
            new SideDialogOptions { CloseDialogOnOverlayClick = true, Position = DialogPosition.Right, ShowMask = true });
        if (result is Guid contentTypeId)
        {
            ContentType = await Mediator.Send(new GetContentTypeCommand { Id = contentTypeId });

            // Need to set the ContentType is this is new content
            if (ContentId == null)
            {
                Content.ContentTypeId = ContentType.Id;
            }

            SyncProperties(Content, ContentType);
        }
    }

    private async Task Save()
    {
        if (Validated())
        {
            var saveContentCommand = new SaveContentCommand { Content = [Content] };
            var result = await Mediator.Send(saveContentCommand);
            NotificationService.Notify(result.Success ? new NotificationMessage { Severity = NotificationSeverity.Success, Summary = $"{Content.Name} Saved", Detail = "", Duration = 4000 } : new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"{Content.Name} Error", Detail = "", Duration = 4000 });
            await AppState.NotifyContentChanged();
        }
    }

    private bool Validated()
    {
        var errors = new List<string>();
        if (Content.Name.IsNullOrWhiteSpace())
        {
            errors.Add("You cannot leave the name empty");
        }

        foreach (var p in ContentType!.ContentProperties.Where(x => x.IsRequired))
        {
            AllContentValues.TryGetValue(p.Id, out var contentValue);
            if (contentValue != null && contentValue.Value.IsNullOrWhiteSpace())
            {
                errors.Add($"{p.Name} is required");
            }
        }

        if (errors.Any())
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Validation Errors", Detail = errors.ListToSingleString(), Duration = 4000 });
            return false;
        }

        return true;
    }

}