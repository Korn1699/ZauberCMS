@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Core.Content.Interfaces
@using ZauberCMS.Core.Plugins
@page "/createcontent"
@page "/createcontent/{ParentId:guid}"
@page "/updatecontent/{ContentId:guid}"
@layout AdminLayout

<PageTitle>Create &amp; Update Content</PageTitle>

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Right" Gap="5" Style="margin-top: 0; padding-top: 0; padding-bottom: 10px;">
    @if (ContentId != null)
    {
        <RadzenButton Variant="Variant.Filled" Text="Create Child Content" Click=@(args => NavigationManager.NavigateTo($"/createcontent/{ContentId}", forceLoad: true)) />
    }
    <RadzenButton Variant="Variant.Filled" Text="Create Content" Click=@(args => NavigationManager.NavigateTo("/createcontent"))/>
</RadzenStack>

@if (ContentType != null)
{
    <EditForm Model="@Content" OnSubmit="Save">
        <p>
            <InputText @bind-Value="@Content.Name" class="form-control"/>
        </p>
        @foreach (var ctp in ContentType.ContentProperties.OrderBy(x => x.SortOrder))
        {
            if (ctp.Component != null)
            {
                AllContentTypeProperties.TryGetValue(ctp.Component, out var contentPropertyComponent);
                if (contentPropertyComponent != null)
                {
                    AllContentValues.TryGetValue(ctp.Id, out var contentValue);
                    if (contentValue != null)
                    {
                        <p>@ctp.Name</p>
                        <p>@ctp.Description</p>
                        <DynamicContentProperty ComponentType="@contentPropertyComponent.GetType()"
                                                Value="@contentValue.Value"
                                                ValueChanged="@(value => UpdateProperty(contentValue.ContentTypePropertyId, value))"/>
                    }
                }
            }
        }

        <button type="submit">Save</button>
    </EditForm>
}
else
{
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Reverse="true" Gap="5" Style="margin-top: 0; padding-top: 0;">
        <RadzenButton Variant="Variant.Filled" Text="Choose Content Type" Click="@ChooseContentType"/>
    </RadzenStack>
}

<SectionContent SectionId="AdminLayout.Sections.HeaderBeginning">
    <RadzenSidebarToggle Click="@(() => ToggleSideBar())" />
</SectionContent>

<SectionContent SectionId="AdminLayout.Sections.SideBar">
    <RadzenSidebar @bind-Expanded="@Expanded">
        <ContentTree />
    </RadzenSidebar>
</SectionContent>

@code {

    [Inject] public DialogService DialogService { get; set; } = default!;
    [Inject] public NotificationService NotificationService { get; set; } = default!;
    [Inject] public ExtensionManager ExtensionManager { get; set; } = default!;
    [Parameter] public Guid? ContentId { get; set; }
    [Parameter] public Guid? ParentId { get; set; }

    private Content Content { get; set; } = new(){ IsRootContent = true};
    private ContentType? ContentType { get; set; }
    private Dictionary<string, IContentProperty> AllContentTypeProperties { get; set; } = new();
    private Dictionary<Guid, ContentValue> AllContentValues { get; set; } = new();
    private bool Expanded { get; set; } = true;


    protected override async Task OnParametersSetAsync()
    {
        AllContentTypeProperties = ExtensionManager.GetInstances<IContentProperty>(true);
        if (ContentId != null)
        {
            Content = await Mediator.Send(new GetContentCommand { Id = ContentId.Value });
            ContentType = await Mediator.Send(new GetContentTypeCommand { Id = Content.ContentTypeId });
            SyncProperties(Content, ContentType);
        }
        else if(ParentId != null)
        {
            Content.ParentId = ParentId;
            Content.IsRootContent = false;
        }
        
        //return base.OnParametersSetAsync();
    }

    /*protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        

    }*/

    private void UpdateProperty(Guid ctpId, string value)
    {
        var property = Content?.ContentPropertyData.FirstOrDefault(p => p.ContentTypePropertyId == ctpId);
        if (property != null)
        {
            property.Value = value;
            property.DateUpdated = DateTime.UtcNow;
        }
    }

    private void SyncProperties(Content content, ContentType contentType)
    {
        var toRemove = new List<ContentValue>();
        // Check for properties that were removed
        foreach (var cpd in content.ContentPropertyData)
        {
            var existsInContentType = contentType.ContentProperties.Any(x => x.Id == cpd.ContentTypePropertyId);
            if (!existsInContentType)
            {
                // Mark for removal
                toRemove.Add(cpd);
            }
        }

        // Remove the properties
        foreach (var tr in toRemove)
        {
            content.ContentPropertyData.Remove(tr);
        }

        // Check for properties to add
        foreach (var ctp in contentType.ContentProperties)
        {
            var exists = content.ContentPropertyData.FirstOrDefault(x => x.ContentTypePropertyId == ctp.Id);
            if (exists == null)
            {
                // Add it
                content.ContentPropertyData.Add(new ContentValue
                {
                    ContentTypePropertyId = ctp.Id
                });
            }
        }
        
        AllContentValues = Content.ContentPropertyData.ToDictionary(x => x.ContentTypePropertyId, x => x);
    }

    private async Task ChooseContentType()
    {
        var result = await DialogService.OpenSideAsync<ListContentTypes>("Choose Content Type",
            new Dictionary<string, object>(),
            new SideDialogOptions { CloseDialogOnOverlayClick = true, Position = DialogPosition.Right, ShowMask = true });
        if (result is Guid contentTypeId)
        {
            ContentType = await Mediator.Send(new GetContentTypeCommand { Id = contentTypeId });

            // Need to set the ContentType is this is new content
            if (ContentId == null)
            {
                Content.ContentTypeId = ContentType.Id;
            }

            SyncProperties(Content, ContentType);
        }
    }

    private async Task Save()
    {
        var saveContentCommand = new SaveContentCommand { Content = Content };
        var result = await Mediator.Send(saveContentCommand);
        NotificationService.Notify(result.Success ? new NotificationMessage { Severity = NotificationSeverity.Success, Summary = $"{Content.Name} Saved", Detail = "", Duration = 4000 } : new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"{Content.Name} Error", Detail = "", Duration = 4000 });
    }

    private void ToggleSideBar()
    {
        Expanded = !Expanded;
    }
}