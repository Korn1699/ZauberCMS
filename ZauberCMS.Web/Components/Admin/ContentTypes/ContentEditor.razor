@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Core.Content.Interfaces
@using ZauberCMS.Core.Plugins
@using Content = ZauberCMS.Core.Content.Models.Content
@page "/createcontent"
@page "/createcontent/{ContentId}"
@layout AdminLayout

@if (ContentType != null)
{
    
    <EditForm Model="@Content" OnSubmit="HandleSubmit">
        <p>
            <InputText @bind-Value="@Content.Name" class="form-control"/>
        </p>
        @foreach (var ctp in ContentType.ContentProperties.OrderBy(x => x.SortOrder))
        {
                AllContentTypeProperties.TryGetValue(ctp.Component, out var contentPropertyComponent);
                
                if (contentPropertyComponent != null)
                {
                    AllContentValues.TryGetValue(ctp.Id, out var contentValue);
                    <DynamicContentProperty ComponentType="@contentPropertyComponent.GetType()"
                                            Value="@contentValue.Value"
                                            ValueChanged="@(value => UpdateProperty(contentValue.ContentTypePropertyId, value))"/>
                }   
        }

        <button type="submit">Save</button>
    </EditForm>   
}
else
{
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Reverse="true" Gap="5" Style="margin-top: 0; padding-top: 0;">
        <RadzenButton Variant="Variant.Filled" Text="Choose Content Type" Click="@ChooseContentType" />
    </RadzenStack>
}

@code {
    
    [Inject] public DialogService DialogService { get; set; } = default!;
    [Inject] public NotificationService NotificationService { get; set; } = default!;
    [Inject] public ExtensionManager ExtensionManager { get; set; } = default!;
    [Parameter] public Guid? ContentId { get; set; }
    
    private Dictionary<Guid, string?> ContentData { get; set; } = new();
    private Content Content { get; set; } = new();
    private ContentType? ContentType { get; set; }
    private Dictionary<string, IContentProperty> AllContentTypeProperties { get; set; } = new();
    private Dictionary<Guid, ContentValue> AllContentValues { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        AllContentTypeProperties = ExtensionManager.GetInstances<IContentProperty>(true);
        if (ContentId != null)
        {
            Content = await Mediator.Send(new GetContentCommand { Id = ContentId.Value });    
        }
        
        // TODO - I need to loop through the ContentType properties
        // TODO - And match the contentvalue to that ContentType
        // TODO - IF there is one, as could be a new document,
        // TODO - could be a new property added etc....
        
        await base.OnInitializedAsync();
    }
    
    private void UpdateProperty(Guid ctpId, string value)
    {
        var property = Content?.ContentPropertyData.FirstOrDefault(p => p.ContentTypePropertyId == ctpId);
        if (property != null)
        {
            property.Value = value;
            property.DateUpdated = DateTime.UtcNow;
        }
    }

    private async Task ChooseContentType()
    {
        var result = await DialogService.OpenSideAsync<ListContentTypes>("Choose Content Type",
            new Dictionary<string, object>(),
            new SideDialogOptions { CloseDialogOnOverlayClick = true, Position = DialogPosition.Right, ShowMask = true });

        if (result is Guid contentTypeId)
        {
            var contentType = await Mediator.Send(new GetContentTypeCommand { Id = contentTypeId });
            ContentType = contentType;
            // Now if this is a new content type, just add some initial data
            foreach (var ctp in ContentType.ContentProperties)
            {
                var exists = Content.ContentPropertyData.FirstOrDefault(x => x.ContentTypePropertyId == ctp.Id);
                if (exists == null)
                {
                    // Add it
                    Content.ContentPropertyData.Add(new ContentValue
                    {
                        ContentTypePropertyId = ctp.Id
                    });
                }
            }

            AllContentValues = Content.ContentPropertyData.ToDictionary(x => x.ContentTypePropertyId, x => x);
        }
    }
    
    private void HandleSubmit()
    {
        var test = Content;
    }
}