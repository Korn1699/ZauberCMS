@page "/admin/createcontentype"
@page "/admin/updatecontentype/{ContentTypeId:guid}"
@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Core.Content.Interfaces
@using ZauberCMS.Core.Plugins
@using ZauberCMS.Core.Shared.Models
@layout AdminLayout

<PageTitle>Create Content Type</PageTitle>

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center" Gap="5" Style="margin-top: -5px; padding-top: 0; padding-bottom: 10px;">
    <RadzenButton Variant="Variant.Filled" Text="Add Property" Click="@(AddProperty)"/>
    <RadzenButton Variant="Variant.Filled" Text="Add Tab" Click="@(AddTab)"/>
    @if (ShowDeleteButton)
    {
        <RadzenButton Variant="Variant.Filled" ButtonStyle="ButtonStyle.Danger" Text="Delete" Click="@(DeleteContentType)"/>
    }
</RadzenStack>

<RadzenPanel Class="rz-mx-auto">
    <EditForm Model="ContentType" OnSubmit="Save">
        <RadzenRow class="rz-pb-6">
            <RadzenTextBox Style="width: 100%;" Name="Name" Placeholder="Name" Value="@ContentType.Name" 
                           ValueChanged="@((string name) => { ContentType.Name = name; ContentType.Alias = _slugHelper.GenerateSlug(name); })" aria-label="Name"/>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center" Gap="0">
                <RadzenIcon Icon="lock_outline" IconStyle="IconStyle.Light" Style="line-height: 20px; height: 20px; font-size: 20px;" /> <RadzenText TextStyle="TextStyle.Caption" Style="margin: 0; padding: 0;">@ContentType.Alias</RadzenText>
            </RadzenStack>
        </RadzenRow>
        <RadzenTabs @ref="Tabs" RenderMode="TabRenderMode.Client" Change="@(i => TabChange(i))">
            <Tabs>
                @{
                    var orderedTabsList = GetTabsInOrder();
                }
                @for (var i = 0; i < orderedTabsList.Count; i++)
                {
                    var tab = orderedTabsList[i];
                    TabIndex.TryAdd(i, tab);

                    <RadzenTabsItem>
                        <Template Context="tabContext">
                            @tab.Name
                        </Template>
                        <ChildContent>
                            <RadzenStack Gap="1rem">
                                @{
                                    var tabProperties = ContentType.ContentProperties
                                        .Where(x => x.TabId == tab.Id)
                                        .OrderBy(x => x.SortOrder)
                                        .ToList();
                                }
                                @if (tabProperties.Any())
                                {
                                    @foreach (var property in tabProperties)
                                    {
                                        <EditorRow>
                                            <LeftColumn>
                                                <RadzenTextBox class="w-100 rz-mb-2" Name="Name" Value="@property.Name"
                                                               ValueChanged="@((string name) => { property.Name = name; property.Alias = _slugHelper.GenerateSlug(name); })"
                                                               Style="font-size: 13px; border: 0; padding-left: 0; color: #000;" Placeholder="Name" aria-label="Property Name"/>
                                                <RadzenText Text="@property.Alias" TextStyle="TextStyle.Caption"/>
                                                <RadzenTextArea Style="font-size: 12px; border: 0; padding-left: 0;" @bind-Value="@property.Description" Placeholder="Description..."/>
                                            </LeftColumn>
                                            <CentreColumn>
                                                <RadzenCard class="p-5 rz-background-color-base-200 rz-text-align-center" Style="height: 100%">
                                                    @(property.Component?.Split('.').Last())
                                                </RadzenCard>
                                            </CentreColumn>
                                            <RightColumn>
                                                <RadzenButton Icon="keyboard_arrow_up" style="height: 100%;" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" Click="@(() => SortProperty(property, false))"/>
                                                <RadzenButton Icon="clear" style="height: 100%;" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" Click="@(() => DeleteProperty(property))"/>
                                                <RadzenButton Icon="keyboard_arrow_down" style="height: 100%;" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" Click="@(() => SortProperty(property, true))"/>
                                                <RadzenButton Icon="low_priority" style="height: 100%;" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" Click="@(() => ChangeTab(property))"/>
                                            </RightColumn>
                                        </EditorRow>
                                    }
                                }
                                else
                                {
                                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
                                        <RadzenButton Variant="Variant.Filled" ButtonStyle="ButtonStyle.Danger" Text="Delete This Tab" Click="@(() => DeleteTab(tab))"/>
                                    </RadzenStack>
                                }
                            </RadzenStack >
                        </ChildContent>
                    </RadzenTabsItem>
                }
                <RadzenTabsItem Text="System">
                    <RadzenListBox @bind-Value="@ContentType.AvailableContentViews"
                                   Data="@ContentViews"
                                   FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                   FilterOperator="StringFilterOperator.StartsWith"
                                   AllowFiltering="true"
                                   TextProperty="Name"
                                   ValueProperty="FullName"
                                   Multiple="true"
                                   AllowClear="true"
                                   Placeholder="Select Content Views" Style="width: 100%; height: 200px"
                                   InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "select content views" } })"/>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center">
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Icon="save" Text="Save"/>
        </RadzenStack>
    </EditForm>
</RadzenPanel>


<SectionContent SectionId="AdminLayout.Sections.HeaderBeginning">
    <RadzenSidebarToggle Click="@(() => ToggleSideBar())"/>
</SectionContent>

<SectionContent SectionId="AdminLayout.Sections.SideBar">
    <RadzenSidebar @bind-Expanded="@Expanded">
        <SettingsTree/>
    </RadzenSidebar>
</SectionContent>

@code {
    [Inject] public DialogService DialogService { get; set; } = default!;
    [Inject] public NotificationService NotificationService { get; set; } = default!;
    [Inject] public ExtensionManager ExtensionManager { get; set; } = default!;

    [Parameter] public Guid? ContentTypeId { get; set; }

    private bool Expanded { get; set; } = true;
    private ContentType ContentType { get; set; } = new();
    private List<ContentViewName> ContentViews { get; set; } = [];
    private Dictionary<int, Tab> TabIndex { get; set; } = new();
    private bool ShowDeleteButton { get; set; }
    private int SelectedTabIndex { get; set; }
    private RadzenTabs Tabs { get; set; }

    private readonly SlugHelper _slugHelper = new(new SlugHelper.Config
    {
        CharacterReplacements = new Dictionary<string, string> { { " ", "" } },
        UseCamelCase = true
    });

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        InitializeContentViews();
        if (ContentTypeId != null)
        {
            ContentType = await Mediator.Send(new GetContentTypeCommand { Id = ContentTypeId.Value });
            ShowDeleteButton = true;
        }

        InitializeTabsAndSortOrders();
    }

    private void TabChange(int i)
    {
        SelectedTabIndex = i;
    }

    private void InitializeTabsAndSortOrders()
    {
        if (!ContentType.Tabs.Any())
        {
            // If no tabs, then create initial tabs and put all properties in the content and reset sort order
            var defaultTab = new Tab
            {
                Name = "Content",
                SortOrder = 1
            };
            ContentType.Tabs.Add(defaultTab);

            // Now set all the properties to be in this tab
            for (var index = 0; index < ContentType.ContentProperties.Count; index++)
            {
                var property = ContentType.ContentProperties[index];
                property.TabId = defaultTab.Id;
                property.SortOrder = index + 1;
            }
        }
        else
        {
            // Now reset sort orders to be correct
            foreach (var tab in ContentType.Tabs)
            {
                var contentProperties = ContentType.ContentProperties
                    .Where(x => x.TabId == tab.Id)
                    .OrderBy(x => x.SortOrder)
                    .ToList();

                for (var i = 0; i < contentProperties.Count; i++)
                {
                    var contentProperty = contentProperties[i];
                    contentProperty.SortOrder = i + 1;
                }
            }
        }
    }

    private void InitializeContentViews()
    {
        var allContentViews = ExtensionManager.GetInstances<IContentView>(true);
        ContentViews = allContentViews.Values.Select(x =>
            {
                var type = x.GetType();
                return new ContentViewName
                {
                    // Get the name of the component
                    Name = type.Name,
                    // Get the full name of the component
                    FullName = type.FullName
                };
            })
            .OrderBy(x => x.Name)
            .ToList();
    }

    private List<Tab> GetTabsInOrder()
    {
        return ContentType.Tabs.OrderBy(x => x.SortOrder).ToList();
    }

    private void SortProperty(ContentTypeProperty property, bool moveDown)
    {
        var propertiesInSameTab = ContentType.ContentProperties
            .Where(p => p.TabId == property.TabId)
            .OrderBy(p => p.SortOrder)
            .ToList();

        var index = propertiesInSameTab.IndexOf(property);

        if (!moveDown && index > 0)
        {
            // Moving up
            var previousProperty = propertiesInSameTab[index - 1];
            previousProperty.SortOrder++;
            property.SortOrder--;
        }
        else if (moveDown && index < propertiesInSameTab.Count - 1)
        {
            // Moving down
            var nextProperty = propertiesInSameTab[index + 1];
            nextProperty.SortOrder--;
            property.SortOrder++;
        }

        Tabs.Reload();
    }


    private void DeleteProperty(ContentTypeProperty property)
    {
        // Remove the specified property from the list
        ContentType.ContentProperties.Remove(property);

        // Get properties in the same tab and re-adjust their sort orders
        var propertiesInSameTab = ContentType.ContentProperties
            .Where(p => p.TabId == property.TabId)
            .OrderBy(p => p.SortOrder)
            .ToList();

        for (var i = 0; i < propertiesInSameTab.Count; i++)
        {
            propertiesInSameTab[i].SortOrder = i + 1;
        }

        // Reload Tabs and update state
        Tabs.Reload();
    }

    private async Task ChangeTab(ContentTypeProperty property)
    {
        var result = await DialogService.OpenSideAsync<ChangeTab>("Add Tab",
            new Dictionary<string, object>{ { "ContentTypeId", ContentType.Id }, {"Tabs", ContentType.Tabs.OrderBy(x => x.SortOrder).ToList()} },
            new SideDialogOptions { CloseDialogOnOverlayClick = true, Position = DialogPosition.Right, ShowMask = true });
        
        if (result is Guid newTabId)
        {
            property.TabId = newTabId;
            Tabs.Reload();
        }
    }

    private void DeleteTab(Tab tab)
    {
        // Remove the specified tab from the list of tabs
        ContentType.Tabs.Remove(tab);

        // Re-adjust the sort orders of the remaining tabs
        for (var i = 0; i < ContentType.Tabs.Count; i++)
        {
            ContentType.Tabs[i].SortOrder = i + 1;
        }

        // Reload the tabs and update the UI state
        Tabs.Reload();
    }

    private async Task Save()
    {
        var saveContentTypeCommand = new SaveContentTypeCommand { ContentType = ContentType };
        var result = await Mediator.Send(saveContentTypeCommand);
        NotificationService.Notify(result.Success ? new NotificationMessage { Severity = NotificationSeverity.Success, Summary = $"{ContentType.Name} Saved", Detail = "", Duration = 4000 } : new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"{ContentType.Name} Error", Detail = result.Messages.MessagesAsString(), Duration = 4000 });
    }

    private async Task DeleteContentType()
    {
        // Check no content is using it first
        var contentUsingContentType = await Mediator.Send(new GetContentsCommand { ContentTypeId = ContentType.Id });
        if (contentUsingContentType.Items.Any())
        {
            // Display error message
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"Delete Error", Detail = "Unable to delete, because this ContentType is being used", Duration = 4000 });
        }
        else
        {
            var result = await Mediator.Send(new DeleteContentTypeCommand { ContentTypeId = ContentType.Id });
            NotificationService.Notify(result.Success ? new NotificationMessage { Severity = NotificationSeverity.Success, Summary = $"{ContentType.Name} Deleted", Detail = "", Duration = 4000 } : new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"{ContentType.Name} Error", Detail = result.Messages.MessagesAsString(), Duration = 4000 });
            
            if (result.Success)
            {
                NavigationManager.NavigateTo("/admin/settings");
            }
        }
    }

    private async Task AddTab()
    {
        var result = await DialogService.OpenSideAsync<AddTab>("Add Tab",
            new Dictionary<string, object>(),
            new SideDialogOptions { CloseDialogOnOverlayClick = true, Position = DialogPosition.Right, ShowMask = true });

        if (result is string name && !string.IsNullOrWhiteSpace(name))
        {
            // Create a new tab with the provided name
            var newTab = new Tab
            {
                Name = name,
                SortOrder = ContentType.Tabs.Count + 1
            };

            // Add the new tab to the list of tabs
            ContentType.Tabs.Add(newTab);

            // The index will be the total count
            TabIndex.TryAdd(ContentType.Tabs.Count, newTab);

            // Reload the tabs and update the UI state
            Tabs.Reload();
        }
    }

    private async Task AddProperty()
    {
        var result = await DialogService.OpenSideAsync<ListContentTypeProperties>("Add Property",
            new Dictionary<string, object>(),
            new SideDialogOptions { CloseDialogOnOverlayClick = true, Position = DialogPosition.Right, ShowMask = true });

        if (result is IContentProperty property)
        {
            var tabToAddTo = TabIndex[SelectedTabIndex];
            ContentType.ContentProperties.Add(new ContentTypeProperty
            {
                Component = property.GetType().FullName ?? string.Empty,
                SortOrder = ContentType.ContentProperties.Count + 1,
                TabId = tabToAddTo.Id
            });
            Tabs.Reload();
        }
    }

    private void ToggleSideBar()
    {
        Expanded = !Expanded;
    }

    private class ContentViewName
    {
        public string Name { get; set; } = string.Empty;
        public string FullName { get; set; } = string.Empty;
    }

}