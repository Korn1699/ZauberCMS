@page "/admin/createcontentype"
@page "/admin/updatecontentype/{ContentTypeId:guid}"
@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Core.Content.Interfaces
@using ZauberCMS.Core.Plugins
@layout AdminLayout

<PageTitle>Create Content Type</PageTitle>
<EditForm Model="ContentType" OnSubmit="Save">
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center" Gap="5" Style="margin-top: -5px; padding-top: 0; padding-bottom: 10px;">
        <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Icon="save" Text="Save"/>
        <RadzenButton Variant="Variant.Filled" Text="Add Content Property" Click="@(AddProperty)"/>
    </RadzenStack>

    <RadzenRow Gap="2rem" Class="rz-p-0">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack>
                <RadzenFieldset Text="Required">
                    <RadzenStack Gap="1rem">
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Name"/>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenTextBox Style="width: 100%;" Name="Name" @bind-Value="@ContentType.Name"/>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenStack>
                </RadzenFieldset>
                <RadzenFieldset Text="Properties">
                    <RadzenStack Gap="1rem">
                        @foreach (var property in ContentType.ContentProperties)
                        {
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenTextBox Style="width: 100%;" Name="Name" @bind-Value="@property.Name"/>
                                    <RadzenTextBox Style="width: 100%;" Name="Name" @bind-Value="@property.Description"/>
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <p>@property.Component @property.SortOrder</p>
                                </RadzenColumn>
                            </RadzenRow>
                        }
                    </RadzenStack>
                </RadzenFieldset>
                <RadzenFieldset Text="Content Views">
                    <RadzenStack Gap="1rem">
                        <RadzenListBox @bind-Value="@ContentType.AvailableContentViews"
                                       Data="@ContentViews"
                                       FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                       FilterOperator="StringFilterOperator.StartsWith"
                                       AllowFiltering="true"
                                       TextProperty="Name"
                                       ValueProperty="FullName"
                                       Multiple="true"
                                       AllowClear="true"
                                       Placeholder="Select Content Views" Style="width: 100%; height: 200px"
                                       InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "select content views" } })"/>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</EditForm>


<SectionContent SectionId="AdminLayout.Sections.HeaderBeginning">
    <RadzenSidebarToggle Click="@(() => ToggleSideBar())"/>
</SectionContent>

<SectionContent SectionId="AdminLayout.Sections.SideBar">
    <RadzenSidebar @bind-Expanded="@Expanded">
        <SettingsTree/>
    </RadzenSidebar>
</SectionContent>

@code {
    [Inject] public DialogService DialogService { get; set; } = default!;
    [Inject] public NotificationService NotificationService { get; set; } = default!;
    [Inject] public ExtensionManager ExtensionManager { get; set; } = default!;

    [Parameter] public Guid? ContentTypeId { get; set; }

    private bool Expanded { get; set; } = true;
    private ContentType ContentType { get; set; } = new();
    private List<ContentViewName> ContentViews { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var allContentViews = ExtensionManager.GetInstances<IContentView>(true);
        ContentViews = allContentViews.Values.Select(x =>
            {
                var type = x.GetType();
                return new ContentViewName
                {
                    // Get the name of the component
                    Name = type.Name,
                    // Get the full name of the component
                    FullName = type.FullName
                };
            })
            .OrderBy(x => x.Name)
            .ToList();

        if (ContentTypeId != null)
        {
            ContentType = await Mediator.Send(new GetContentTypeCommand { Id = ContentTypeId.Value });
        }
    }

    private async Task Save()
    {
        var saveContentTypeCommand = new SaveContentTypeCommand { ContentType = ContentType };
        var result = await Mediator.Send(saveContentTypeCommand);
        NotificationService.Notify(result.Success ? new NotificationMessage { Severity = NotificationSeverity.Success, Summary = $"{ContentType.Name} Saved", Detail = "", Duration = 4000 } : new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"{ContentType.Name} Error", Detail = "", Duration = 4000 });
    }

    private async Task AddProperty()
    {
        var result = await DialogService.OpenSideAsync<ListContentTypeProperties>("Add Property",
            new Dictionary<string, object>(),
            new SideDialogOptions { CloseDialogOnOverlayClick = true, Position = DialogPosition.Right, ShowMask = true });

        if (result is IContentProperty property)
        {
            ContentType.ContentProperties.Add(new ContentTypeProperty
            {
                Component = property.GetType().FullName ?? string.Empty,
                SortOrder = ContentType.ContentProperties.Count + 1
            });
            StateHasChanged();
        }
    }

    private void ToggleSideBar()
    {
        Expanded = !Expanded;
    }

    private class ContentViewName
    {
        public string Name { get; set; } = string.Empty;
        public string FullName { get; set; } = string.Empty;
    }

}