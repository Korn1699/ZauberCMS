@page "/admin/createcontentype"
@page "/admin/updatecontentype/{ContentTypeId:guid}"
@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Core.Content.Interfaces
@using ZauberCMS.Core.Plugins
@using ZauberCMS.Core.Shared.Models
@layout AdminLayout

<PageTitle>Create Content Type</PageTitle>

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center" Gap="5" Style="margin-top: -5px; padding-top: 0; padding-bottom: 10px;">
    <RadzenButton Variant="Variant.Filled" Text="Add Content Property" Click="@(AddProperty)"/>
    @if (ShowDeleteButton)
    {
        <RadzenButton Variant="Variant.Filled" ButtonStyle="ButtonStyle.Danger" Text="Delete" Click="@(DeleteContentType)"/>
    }
</RadzenStack>

<RadzenPanel Class="rz-mx-auto">
    <EditForm Model="ContentType" OnSubmit="Save">
        <RadzenRow class="rz-pb-6">
            <RadzenTextBox Style="width: 100%;" Name="Name" Placeholder="Name" @bind-Value="@ContentType.Name" aria-label="Name"/>
        </RadzenRow>
        <RadzenTabs @ref="Tabs" RenderMode="TabRenderMode.Client" @bind-SelectedIndex="@SelectedTabIndex">
            <Tabs>
                @{
                    var orderedTabsList = ContentType.Tabs.OrderBy(x => x.SortOrder).ToList();
                }
                @for (var i = 0; i < orderedTabsList.Count; i++)
                {
                    var tab = orderedTabsList[i];
                    TabIndex.TryAdd(i, tab);

                    <RadzenTabsItem Text="@(tab.Name)">
                        <RadzenStack Gap="1rem">
                            @foreach (var property in ContentType.ContentProperties
                                          .Where(x => x.TabId == tab.Id)
                                          .OrderBy(x => x.SortOrder))
                            {
                                <EditorRow>
                                    <LeftColumn>
                                        <RadzenTextBox class="w-100 rz-mb-2" Name="Name" Value="@property.Name"
                                                       ValueChanged="@((string name) => { property.Name = name; property.Alias = _slugHelper.GenerateSlug(name); })"
                                                       Style="font-size: 13px; border: 0; padding-left: 0; color: #000;" Placeholder="Name" aria-label="Property Name"/>
                                        <RadzenText Text="@property.Alias" TextStyle="TextStyle.Caption"/>
                                        <RadzenTextArea Style="font-size: 12px; border: 0; padding-left: 0;" @bind-Value="@property.Description" Placeholder="Description..."/>
                                    </LeftColumn>
                                    <CentreColumn>
                                        <RadzenCard class="p-5 rz-background-color-base-200 rz-text-align-center" Style="height: 100%">
                                            <RadzenBadge BadgeStyle="BadgeStyle.Light" Shade="Shade.Light" Text="@(property.Component)"/>
                                        </RadzenCard>
                                    </CentreColumn>
                                    <RightColumn>
                                        <RadzenButton Icon="keyboard_arrow_up" style="height: 100%;" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text"/>
                                        <RadzenButton Icon="clear" style="height: 100%;" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text"/>
                                        <RadzenButton Icon="keyboard_arrow_down" style="height: 100%;" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text"/>
                                        <RadzenButton Icon="low_priority" style="height: 100%;" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text"/>
                                    </RightColumn>
                                </EditorRow>
                            }
                        </RadzenStack >
                    </RadzenTabsItem>
                }
                <RadzenTabsItem Text="System">
                    <RadzenListBox @bind-Value="@ContentType.AvailableContentViews"
                                   Data="@ContentViews"
                                   FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                   FilterOperator="StringFilterOperator.StartsWith"
                                   AllowFiltering="true"
                                   TextProperty="Name"
                                   ValueProperty="FullName"
                                   Multiple="true"
                                   AllowClear="true"
                                   Placeholder="Select Content Views" Style="width: 100%; height: 200px"
                                   InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "select content views" } })"/>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right" AlignItems="AlignItems.Center">
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Icon="save" Text="Save"/>
        </RadzenStack>
    </EditForm>
</RadzenPanel>


<SectionContent SectionId="AdminLayout.Sections.HeaderBeginning">
    <RadzenSidebarToggle Click="@(() => ToggleSideBar())"/>
</SectionContent>

<SectionContent SectionId="AdminLayout.Sections.SideBar">
    <RadzenSidebar @bind-Expanded="@Expanded">
        <SettingsTree/>
    </RadzenSidebar>
</SectionContent>

@code {
    [Inject] public DialogService DialogService { get; set; } = default!;
    [Inject] public NotificationService NotificationService { get; set; } = default!;
    [Inject] public ExtensionManager ExtensionManager { get; set; } = default!;

    [Parameter] public Guid? ContentTypeId { get; set; }

    private bool Expanded { get; set; } = true;
    private ContentType ContentType { get; set; } = new();
    private List<ContentViewName> ContentViews { get; set; } = [];
    private int SelectedTabIndex { get; set; }
    private RadzenTabs Tabs { get; set; }
    private Dictionary<int, Tab> TabIndex { get; set; } = new();
    private bool ShowDeleteButton { get; set; }

    private readonly SlugHelper _slugHelper = new(new SlugHelper.Config
    {
        CharacterReplacements = new Dictionary<string, string> { { " ", "" } },
        UseCamelCase = true
    });

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        InitializeContentViews();
        if (ContentTypeId != null)
        {
            ContentType = await Mediator.Send(new GetContentTypeCommand { Id = ContentTypeId.Value });
            ShowDeleteButton = true;
        }

        InitializeTabs();
    }

    private void InitializeTabs()
    {
        if (!ContentType.Tabs.Any())
        {
            // If no tabs, then create initial tabs and put all properties in the content and reset sort order
            var defaultTab = new Tab
            {
                Name = "Content",
                SortOrder = 1
            };
            ContentType.Tabs.Add(defaultTab);

            // Now set all the properties to be in this tab
            foreach (var property in ContentType.ContentProperties)
            {
                property.TabId = defaultTab.Id;
            }
        }
    }

    private void InitializeContentViews()
    {
        var allContentViews = ExtensionManager.GetInstances<IContentView>(true);
        ContentViews = allContentViews.Values.Select(x =>
            {
                var type = x.GetType();
                return new ContentViewName
                {
                    // Get the name of the component
                    Name = type.Name,
                    // Get the full name of the component
                    FullName = type.FullName
                };
            })
            .OrderBy(x => x.Name)
            .ToList();
    }

    private async Task Save()
    {
        var saveContentTypeCommand = new SaveContentTypeCommand { ContentType = ContentType };
        var result = await Mediator.Send(saveContentTypeCommand);
        NotificationService.Notify(result.Success ? new NotificationMessage { Severity = NotificationSeverity.Success, Summary = $"{ContentType.Name} Saved", Detail = "", Duration = 4000 } : new NotificationMessage { Severity = NotificationSeverity.Error, Summary = $"{ContentType.Name} Error", Detail = "", Duration = 4000 });
    }

    private void DeleteContentType()
    {
        //TODO
    }

    private async Task AddProperty()
    {
        var result = await DialogService.OpenSideAsync<ListContentTypeProperties>("Add Property",
            new Dictionary<string, object>(),
            new SideDialogOptions { CloseDialogOnOverlayClick = true, Position = DialogPosition.Right, ShowMask = true });

        if (result is IContentProperty property)
        {
            var tabToAddTo = TabIndex[SelectedTabIndex];
            ContentType.ContentProperties.Add(new ContentTypeProperty
            {
                Component = property.GetType().FullName ?? string.Empty,
                SortOrder = ContentType.ContentProperties.Count + 1,
                TabId = tabToAddTo.Id
            });
            Tabs.Reload();
            StateHasChanged();
        }
    }

    private void ToggleSideBar()
    {
        Expanded = !Expanded;
    }

    private class ContentViewName
    {
        public string Name { get; set; } = string.Empty;
        public string FullName { get; set; } = string.Empty;
    }

}