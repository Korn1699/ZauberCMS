@using Microsoft.EntityFrameworkCore
@using ZauberCMS.Core.Content.Commands
@using ZauberCMS.Core.Data
@using Content = ZauberCMS.Core.Content.Models.Content

<div class="rz-p-4">
    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Content</RadzenText>
</div>

<RadzenTree @ref="Tree" Data="@ContentItems" Expand="@OnExpand" Change="@OnChange" @bind-Value="@Selection" ItemContextMenu="ItemContextMenu">
    <RadzenTreeLevel Expanded="@ShouldBeExpanded" HasChildren="@(e => HasChildren(e))" TextProperty="Name"/>
</RadzenTree>

@code {
    [Inject] public IServiceProvider ServiceProvider { get; set; } = default!;
    [Inject] public ContextMenuService ContextMenuService { get; set; } = default!;
    [Inject] public NotificationService NotificationService { get; set; } = default!;
    [Inject] public DialogService DialogService { get; set; } = default!;
    
    private List<Content> ContentItems { get; set; } = [];
    private object? Selection { get; set; }
    private RadzenTree Tree { get; set; }
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        using var scope = ServiceProvider.CreateScope();
        var dbContext = scope.ServiceProvider.GetRequiredService<ZauberDbContext>();
        ContentItems = dbContext.Content
            .AsNoTracking()
            .Where(x => x.IsRootContent)
            .OrderBy(x => x.SortOrder)
            .ToList();
    }

    private bool HasChildren(object data)
    {
        using var scope = ServiceProvider.CreateScope();
        var dbContext = scope.ServiceProvider.GetRequiredService<ZauberDbContext>();
        if (data is Content content)
        {
            return dbContext.Content.AsNoTracking().Count(x => x.ParentId == content.Id) > 0;
        }

        return false;
    }

    private bool ShouldBeExpanded(object data)
    {
        if (data is Content content)
        {
            return HasChildren(content) && content.ParentId == null;
        }

        return false;
    }
    
    private void ItemContextMenu(TreeItemContextMenuEventArgs args)
    { 
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new(){ Text = "Create", Value = 1 },
                new(){ Text = "Delete", Value = 2 },
                new(){ Text = "Sort", Value = 3 }
            },
             e =>
            {
                var content = (Content)args.Value;
                //var text = args.Text;
                switch(e.Value)
                {
                    case 1:
                        // Handle Create
                        NavigationManager.NavigateTo($"/admin/createcontent/{content.Id}");
                        break;
                    case 2:
                        // Confirm dialogue, say if there are children, and confirm then delete all
                        Task.Run(async () =>
                        {
                            var dbContent = await Mediator.Send(new GetContentCommand { Id = content.Id, IncludeChildren = true });
                            var hasChildren = dbContent.Children.Any();
                            var message = hasChildren
                                ? "The content you are trying to delete has child content, are you sure you want to delete it?"
                                : "Are you sure you want to delete this?";
                            var delete = await DialogService.Confirm(message, "Delete", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
                            if (delete == true)
                            {
                                //TODO
                            }
                        });
                        break;
                    case 3:
                        Task.Run(async () =>
                        {
                            var dbContent = await Mediator.Send(new GetContentCommand { Id = content.Id, IncludeChildren = true });
                            if (!dbContent.Children.Any())
                            {
                                // Show message if no children
                                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Hmmmm", Detail = "Sorry, nothing to sort as this content has no children", Duration = 4000 });
                            }
                            else
                            {
                                // Show side panel with sorting of children (Can I use a Radzen component?)
                            }
                        });
                        break;
                }
            }
        );
    }

    void OnExpand(TreeExpandEventArgs args)
    {
        using var scope = ServiceProvider.CreateScope();
        var dbContext = scope.ServiceProvider.GetRequiredService<ZauberDbContext>();
        if (args.Value is Content category)
        {
            args.Children.Data = dbContext.Content
                .AsNoTracking()
                .Where(x => x.ParentId == category.Id)
                .OrderBy(x => x.SortOrder)
                .ToList();
            args.Children.TextProperty = "Name";
        }
        //args.Children.HasChildren = (product) => false;

        /* Optional template
        args.Children.Template = context => builder => {
            builder.OpenElement(1, "strong");
            builder.AddContent(2, (context.Value as Product).ProductName);
            builder.CloseElement();
        };
        */
    }
    
    void OnChange()
    {
        if (Selection is Content content)
        {
            NavigationManager.NavigateTo($"/admin/updatecontent/{content.Id}");
        }
    }

}