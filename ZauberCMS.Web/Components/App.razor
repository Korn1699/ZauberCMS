@using Microsoft.Extensions.Options
@using ZauberCMS.Core.Settings
@using System.Globalization
@using Microsoft.AspNetCore.Localization

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <base href="/"/>
    @if (Settings.Value.UseRadzen || IsAdmin)
    {
        <link rel="stylesheet" href="bootstrap/bootstrap.min.css"/>
        
        <link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css">
    }
    <link href="ZauberCMS.Web.styles.css" rel="stylesheet">
    <HeadOutlet @rendermode="RenderModeForPage"/>
</head>

<body>

<CascadingValue Value="IsAdmin">
    <Routes @rendermode="RenderModeForPage"/>
</CascadingValue>

<script src="_framework/blazor.web.js"></script>
<script>
    window.blazorCulture = {
        get: () => window.localStorage['BlazorCulture'],
        set: (value) => window.localStorage['BlazorCulture'] = value
    };
</script>
@if (Settings.Value.UseRadzen || IsAdmin)
{
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js?v=@(typeof(Colors).Assembly.GetName().Version)"></script>
}
</body>

</html>

@code {
    [Inject] public IOptions<ZauberSettings> Settings { get; set; } = default!;

    private bool IsAdmin
    {
        get
        {
            // Get the relative path from the NavigationManager's URI
            var absoluteUri = new Uri(NavigationManager.Uri);
            var requestPathSpan = absoluteUri.LocalPath.AsSpan();
            return requestPathSpan.StartsWith(Constants.Urls.AdminBaseUrl, StringComparison.OrdinalIgnoreCase);
        }
    }

    // Set the Admin to InteractiveServer but use SSR for rest of site
    private IComponentRenderMode? RenderModeForPage => IsAdmin ? InteractiveServer : null;
    
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    protected override void OnInitialized()
    {
        HttpContext?.Response.Cookies.Append(
            CookieRequestCultureProvider.DefaultCookieName,
            CookieRequestCultureProvider.MakeCookieValue(
                new RequestCulture(
                    CultureInfo.CurrentCulture,
                    CultureInfo.CurrentUICulture)));
    }
}